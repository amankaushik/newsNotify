/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPI_QOpenGLFunctions_2_1.h"

#line 28 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
#include <qopenglfunctions_2_1.h>
#line 29 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"



class sipQOpenGLFunctions_2_1 : public QOpenGLFunctions_2_1
{
public:
    sipQOpenGLFunctions_2_1();
    virtual ~sipQOpenGLFunctions_2_1();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool initializeOpenGLFunctions();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLFunctions_2_1(const sipQOpenGLFunctions_2_1 &);
    sipQOpenGLFunctions_2_1 &operator = (const sipQOpenGLFunctions_2_1 &);

    char sipPyMethods[1];
};

sipQOpenGLFunctions_2_1::sipQOpenGLFunctions_2_1(): QOpenGLFunctions_2_1(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLFunctions_2_1::~sipQOpenGLFunctions_2_1()
{
    sipCommonDtor(sipPySelf);
}

bool sipQOpenGLFunctions_2_1::initializeOpenGLFunctions()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_initializeOpenGLFunctions);

    if (!sipMeth)
        return QOpenGLFunctions_2_1::initializeOpenGLFunctions();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI__QOpenGLFunctions_2_1_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI__QOpenGLFunctions_2_1_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_initializeOpenGLFunctions, "QOpenGLFunctions_2_1.initializeOpenGLFunctions() -> bool");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_initializeOpenGLFunctions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_initializeOpenGLFunctions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QOpenGLFunctions_2_1::initializeOpenGLFunctions() : sipCpp->initializeOpenGLFunctions());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_initializeOpenGLFunctions, doc_QOpenGLFunctions_2_1_initializeOpenGLFunctions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glViewport, "QOpenGLFunctions_2_1.glViewport(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glViewport(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLsizei a2;
        GLsizei a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glViewport(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glViewport, doc_QOpenGLFunctions_2_1_glViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDepthRange, "QOpenGLFunctions_2_1.glDepthRange(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDepthRange(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDepthRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glDepthRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDepthRange, doc_QOpenGLFunctions_2_1_glDepthRange);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsEnabled, "QOpenGLFunctions_2_1.glIsEnabled(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsEnabled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsEnabled(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsEnabled, doc_QOpenGLFunctions_2_1_glIsEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexLevelParameteriv, "QOpenGLFunctions_2_1.glGetTexLevelParameteriv(int, int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexLevelParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexLevelParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            int sipIsErr = 0;

#line 40 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[1];
            
        sipCpp->glGetTexLevelParameteriv(a0, a1, a2, params);
        
        a3 = qpyopengl_from_GLint(&sipIsErr, params, 1);
#line 224 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a3;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexLevelParameteriv, doc_QOpenGLFunctions_2_1_glGetTexLevelParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexLevelParameterfv, "QOpenGLFunctions_2_1.glGetTexLevelParameterfv(int, int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexLevelParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexLevelParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            int sipIsErr = 0;

#line 49 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[1];
            
        sipCpp->glGetTexLevelParameterfv(a0, a1, a2, params);
        
        a3 = qpyopengl_from_GLfloat(&sipIsErr, params, 1);
#line 264 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a3;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexLevelParameterfv, doc_QOpenGLFunctions_2_1_glGetTexLevelParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexParameteriv, "QOpenGLFunctions_2_1.glGetTexParameteriv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 58 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_TEXTURE_SWIZZLE_RGBA) || defined(GL_TEXTURE_SWIZZLE_RGBA)
        #if defined(GL_TEXTURE_SWIZZLE_RGBA)
        case GL_TEXTURE_SWIZZLE_RGBA:
        #endif
        #if defined(GL_TEXTURE_BORDER_COLOR)
        case GL_TEXTURE_BORDER_COLOR:
        #endif
            nr_params = 4;
            break;
        #endif
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexParameteriv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 321 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexParameteriv, doc_QOpenGLFunctions_2_1_glGetTexParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexParameterfv, "QOpenGLFunctions_2_1.glGetTexParameterfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 85 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_TEXTURE_SWIZZLE_RGBA) || defined(GL_TEXTURE_SWIZZLE_RGBA)
        #if defined(GL_TEXTURE_SWIZZLE_RGBA)
        case GL_TEXTURE_SWIZZLE_RGBA:
        #endif
        #if defined(GL_TEXTURE_BORDER_COLOR)
        case GL_TEXTURE_BORDER_COLOR:
        #endif
            nr_params = 4;
            break;
        #endif
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexParameterfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 378 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexParameterfv, doc_QOpenGLFunctions_2_1_glGetTexParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetString, "QOpenGLFunctions_2_1.glGetString(int) -> str");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetString(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            const char*sipRes = 0;

#line 112 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        sipRes = reinterpret_cast<const char *>(sipCpp->glGetString(a0));
#line 411 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetString, doc_QOpenGLFunctions_2_1_glGetString);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetIntegerv, "QOpenGLFunctions_2_1.glGetIntegerv(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetIntegerv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetIntegerv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 117 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLint[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetIntegerv(a0, params);
        a1 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 512 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetIntegerv, doc_QOpenGLFunctions_2_1_glGetIntegerv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetFloatv, "QOpenGLFunctions_2_1.glGetFloatv(int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetFloatv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetFloatv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 186 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLfloat[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetFloatv(a0, params);
        a1 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 610 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetFloatv, doc_QOpenGLFunctions_2_1_glGetFloatv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetError, "QOpenGLFunctions_2_1.glGetError() -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetError(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            GLenum sipRes;

            sipRes = sipCpp->glGetError();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetError, doc_QOpenGLFunctions_2_1_glGetError);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetDoublev, "QOpenGLFunctions_2_1.glGetDoublev(int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetDoublev(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetDoublev(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 256 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLdouble fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLdouble[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetDoublev(a0, params);
        a1 = qpyopengl_from_GLdouble(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 735 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetDoublev, doc_QOpenGLFunctions_2_1_glGetDoublev);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetBooleanv, "QOpenGLFunctions_2_1.glGetBooleanv(int) -> bool-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetBooleanv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetBooleanv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 325 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLboolean fixed_params[4], *params;
        GLint nr_params = 0;
        GLenum query;
        
        switch (a0)
        {
        case GL_COMPRESSED_TEXTURE_FORMATS:
            query = GL_NUM_COMPRESSED_TEXTURE_FORMATS;
            break;
        
        #if defined(GL_PROGRAM_BINARY_FORMATS)
        case GL_PROGRAM_BINARY_FORMATS:
            query = GL_NUM_PROGRAM_BINARY_FORMATS;
            break;
        #endif
        
        #if defined(GL_SHADER_BINARY_FORMATS)
        case GL_SHADER_BINARY_FORMATS:
            query = GL_NUM_SHADER_BINARY_FORMATS;
            break;
        #endif
        
        case GL_BLEND_COLOR:
        case GL_COLOR_CLEAR_VALUE:
        case GL_COLOR_WRITEMASK:
        case GL_SCISSOR_BOX:
        case GL_VIEWPORT:
            nr_params = 4;
            break;
        
        case GL_ALIASED_LINE_WIDTH_RANGE:
        case GL_ALIASED_POINT_SIZE_RANGE:
        case GL_DEPTH_RANGE:
        #if defined(GL_LINE_WIDTH_RANGE)
        case GL_LINE_WIDTH_RANGE:
        #endif
        case GL_MAX_VIEWPORT_DIMS:
        #if defined(GL_POINT_SIZE_RANGE)
        case GL_POINT_SIZE_RANGE:
        #endif
        #if defined(GL_VIEWPORT_BOUNDS_RANGE)
        case GL_VIEWPORT_BOUNDS_RANGE:
        #endif
            nr_params = 2;
            break;
            
        default:
            nr_params = 1;
        }
        
        if (nr_params == 0)
        {
            sipCpp->glGetIntegerv(query, &nr_params);
            params = new GLboolean[nr_params];
        }
        else
        {
            params = fixed_params;
        }
        
        sipCpp->glGetBooleanv(a0, params);
        a1 = qpyopengl_from_GLboolean(&sipIsErr, params, nr_params);
            
        if (params != fixed_params)
            delete[] params;
#line 833 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetBooleanv, doc_QOpenGLFunctions_2_1_glGetBooleanv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glReadBuffer, "QOpenGLFunctions_2_1.glReadBuffer(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glReadBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glReadBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glReadBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glReadBuffer, doc_QOpenGLFunctions_2_1_glReadBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelStorei, "QOpenGLFunctions_2_1.glPixelStorei(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelStorei(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelStorei(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelStorei(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelStorei, doc_QOpenGLFunctions_2_1_glPixelStorei);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelStoref, "QOpenGLFunctions_2_1.glPixelStoref(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelStoref(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelStoref(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelStoref(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelStoref, doc_QOpenGLFunctions_2_1_glPixelStoref);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDepthFunc, "QOpenGLFunctions_2_1.glDepthFunc(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDepthFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDepthFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDepthFunc(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDepthFunc, doc_QOpenGLFunctions_2_1_glDepthFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilOp, "QOpenGLFunctions_2_1.glStencilOp(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilOp(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilOp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glStencilOp(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilOp, doc_QOpenGLFunctions_2_1_glStencilOp);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilFunc, "QOpenGLFunctions_2_1.glStencilFunc(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLuint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glStencilFunc(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilFunc, doc_QOpenGLFunctions_2_1_glStencilFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLogicOp, "QOpenGLFunctions_2_1.glLogicOp(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLogicOp(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLogicOp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glLogicOp(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLogicOp, doc_QOpenGLFunctions_2_1_glLogicOp);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBlendFunc, "QOpenGLFunctions_2_1.glBlendFunc(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBlendFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBlendFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glBlendFunc(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBlendFunc, doc_QOpenGLFunctions_2_1_glBlendFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFlush, "QOpenGLFunctions_2_1.glFlush()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFlush(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFlush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glFlush();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFlush, doc_QOpenGLFunctions_2_1_glFlush);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFinish, "QOpenGLFunctions_2_1.glFinish()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFinish(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFinish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glFinish();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFinish, doc_QOpenGLFunctions_2_1_glFinish);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEnable, "QOpenGLFunctions_2_1.glEnable(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEnable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEnable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEnable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEnable, doc_QOpenGLFunctions_2_1_glEnable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDisable, "QOpenGLFunctions_2_1.glDisable(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDisable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDisable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDisable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDisable, doc_QOpenGLFunctions_2_1_glDisable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDepthMask, "QOpenGLFunctions_2_1.glDepthMask(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDepthMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDepthMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLboolean a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDepthMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDepthMask, doc_QOpenGLFunctions_2_1_glDepthMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorMask, "QOpenGLFunctions_2_1.glColorMask(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLboolean a0;
        GLboolean a1;
        GLboolean a2;
        GLboolean a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BMMMM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColorMask(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorMask, doc_QOpenGLFunctions_2_1_glColorMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilMask, "QOpenGLFunctions_2_1.glStencilMask(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glStencilMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilMask, doc_QOpenGLFunctions_2_1_glStencilMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClearDepth, "QOpenGLFunctions_2_1.glClearDepth(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClearDepth(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClearDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glClearDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClearDepth, doc_QOpenGLFunctions_2_1_glClearDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClearStencil, "QOpenGLFunctions_2_1.glClearStencil(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClearStencil(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClearStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glClearStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClearStencil, doc_QOpenGLFunctions_2_1_glClearStencil);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClearColor, "QOpenGLFunctions_2_1.glClearColor(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClearColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glClearColor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClearColor, doc_QOpenGLFunctions_2_1_glClearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClear, "QOpenGLFunctions_2_1.glClear(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClear(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbitfield a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glClear(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClear, doc_QOpenGLFunctions_2_1_glClear);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawBuffer, "QOpenGLFunctions_2_1.glDrawBuffer(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDrawBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawBuffer, doc_QOpenGLFunctions_2_1_glDrawBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexImage2D, "QOpenGLFunctions_2_1.glTexImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLsizei a4;
        GLint a5;
        GLenum a6;
        GLenum a7;
        PyObject * a8;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 414 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, a7, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 1428 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexImage2D, doc_QOpenGLFunctions_2_1_glTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexImage1D, "QOpenGLFunctions_2_1.glTexImage1D(int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLint a4;
        GLenum a5;
        GLenum a6;
        PyObject * a7;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipErrorState sipError = sipErrorNone;

#line 422 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a7, a6, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexImage1D(a0, a1, a2, a3, a4, a5, a6, array);
#line 1477 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexImage1D, doc_QOpenGLFunctions_2_1_glTexImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexParameteriv, "QOpenGLFunctions_2_1.glTexParameteriv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 430 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexParameteriv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 1521 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexParameteriv, doc_QOpenGLFunctions_2_1_glTexParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexParameteri, "QOpenGLFunctions_2_1.glTexParameteri(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexParameteri(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexParameteri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexParameteri(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexParameteri, doc_QOpenGLFunctions_2_1_glTexParameteri);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexParameterfv, "QOpenGLFunctions_2_1.glTexParameterfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 439 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexParameterfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 1594 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexParameterfv, doc_QOpenGLFunctions_2_1_glTexParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexParameterf, "QOpenGLFunctions_2_1.glTexParameterf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexParameterf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexParameterf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexParameterf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexParameterf, doc_QOpenGLFunctions_2_1_glTexParameterf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glScissor, "QOpenGLFunctions_2_1.glScissor(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glScissor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glScissor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLsizei a2;
        GLsizei a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glScissor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glScissor, doc_QOpenGLFunctions_2_1_glScissor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPolygonMode, "QOpenGLFunctions_2_1.glPolygonMode(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPolygonMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPolygonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPolygonMode(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPolygonMode, doc_QOpenGLFunctions_2_1_glPolygonMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPointSize, "QOpenGLFunctions_2_1.glPointSize(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPointSize(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPointSize, doc_QOpenGLFunctions_2_1_glPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLineWidth, "QOpenGLFunctions_2_1.glLineWidth(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLineWidth(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glLineWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLineWidth, doc_QOpenGLFunctions_2_1_glLineWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glHint, "QOpenGLFunctions_2_1.glHint(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glHint(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glHint, doc_QOpenGLFunctions_2_1_glHint);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFrontFace, "QOpenGLFunctions_2_1.glFrontFace(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFrontFace(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFrontFace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glFrontFace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFrontFace, doc_QOpenGLFunctions_2_1_glFrontFace);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCullFace, "QOpenGLFunctions_2_1.glCullFace(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCullFace(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCullFace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glCullFace(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCullFace, doc_QOpenGLFunctions_2_1_glCullFace);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexubv, "QOpenGLFunctions_2_1.glIndexubv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 455 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexubv(reinterpret_cast<const GLubyte *>(array));
#line 1860 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexubv, doc_QOpenGLFunctions_2_1_glIndexubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexub, "QOpenGLFunctions_2_1.glIndexub(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexub(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexub(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLubyte a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexub(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexub, doc_QOpenGLFunctions_2_1_glIndexub);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsTexture, "QOpenGLFunctions_2_1.glIsTexture(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsTexture(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsTexture, doc_QOpenGLFunctions_2_1_glIsTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGenTextures, "QOpenGLFunctions_2_1.glGenTextures(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGenTextures(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGenTextures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 466 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenTextures(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 1965 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGenTextures, doc_QOpenGLFunctions_2_1_glGenTextures);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteTextures, "QOpenGLFunctions_2_1.glDeleteTextures(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteTextures(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteTextures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 477 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteTextures(a0, reinterpret_cast<const GLuint *>(array));
#line 2003 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteTextures, doc_QOpenGLFunctions_2_1_glDeleteTextures);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBindTexture, "QOpenGLFunctions_2_1.glBindTexture(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBindTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBindTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindTexture(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBindTexture, doc_QOpenGLFunctions_2_1_glBindTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexSubImage2D, "QOpenGLFunctions_2_1.glTexSubImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        GLsizei a5;
        GLenum a6;
        GLenum a7;
        PyObject * a8;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 487 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, a7, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexSubImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 2081 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexSubImage2D, doc_QOpenGLFunctions_2_1_glTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexSubImage1D, "QOpenGLFunctions_2_1.glTexSubImage1D(int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLenum a4;
        GLenum a5;
        PyObject * a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipErrorState sipError = sipErrorNone;

#line 495 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a6, a5, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexSubImage1D(a0, a1, a2, a3, a4, a5, array);
#line 2129 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexSubImage1D, doc_QOpenGLFunctions_2_1_glTexSubImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyTexSubImage2D, "QOpenGLFunctions_2_1.glCopyTexSubImage2D(int, int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLint a5;
        GLsizei a6;
        GLsizei a7;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiiiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp->glCopyTexSubImage2D(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyTexSubImage2D, doc_QOpenGLFunctions_2_1_glCopyTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyTexSubImage1D, "QOpenGLFunctions_2_1.glCopyTexSubImage1D(int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glCopyTexSubImage1D(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyTexSubImage1D, doc_QOpenGLFunctions_2_1_glCopyTexSubImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyTexImage2D, "QOpenGLFunctions_2_1.glCopyTexImage2D(int, int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        GLsizei a6;
        GLint a7;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiuiiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipCpp->glCopyTexImage2D(a0,a1,a2,a3,a4,a5,a6,a7);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyTexImage2D, doc_QOpenGLFunctions_2_1_glCopyTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyTexImage1D, "QOpenGLFunctions_2_1.glCopyTexImage1D(int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        GLint a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiuiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipCpp->glCopyTexImage1D(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyTexImage1D, doc_QOpenGLFunctions_2_1_glCopyTexImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPolygonOffset, "QOpenGLFunctions_2_1.glPolygonOffset(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPolygonOffset(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPolygonOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPolygonOffset(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPolygonOffset, doc_QOpenGLFunctions_2_1_glPolygonOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawElements, "QOpenGLFunctions_2_1.glDrawElements(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawElements(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawElements(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        GLenum a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 508 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, a2, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDrawElements(a0, a1, a2, array);
#line 2335 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawElements, doc_QOpenGLFunctions_2_1_glDrawElements);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawArrays, "QOpenGLFunctions_2_1.glDrawArrays(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawArrays(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawArrays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLsizei a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glDrawArrays(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawArrays, doc_QOpenGLFunctions_2_1_glDrawArrays);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyTexSubImage3D, "QOpenGLFunctions_2_1.glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage3D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyTexSubImage3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLint a5;
        GLint a6;
        GLsizei a7;
        GLsizei a8;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiiiiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->glCopyTexSubImage3D(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyTexSubImage3D, doc_QOpenGLFunctions_2_1_glCopyTexSubImage3D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexSubImage3D, "QOpenGLFunctions_2_1.glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage3D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexSubImage3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        GLsizei a6;
        GLsizei a7;
        GLenum a8;
        GLenum a9;
        PyObject * a10;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
        {
            sipErrorState sipError = sipErrorNone;

#line 518 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a10, a9, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexSubImage3D(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, array);
#line 2451 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexSubImage3D, doc_QOpenGLFunctions_2_1_glTexSubImage3D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexImage3D, "QOpenGLFunctions_2_1.glTexImage3D(int, int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexImage3D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexImage3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLsizei a4;
        GLsizei a5;
        GLint a6;
        GLenum a7;
        GLenum a8;
        PyObject * a9;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
        {
            sipErrorState sipError = sipErrorNone;

#line 526 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a9, a8, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexImage3D(a0, a1, a2, a3, a4, a5, a6, a7, a8, array);
#line 2502 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexImage3D, doc_QOpenGLFunctions_2_1_glTexImage3D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawRangeElements, "QOpenGLFunctions_2_1.glDrawRangeElements(int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawRangeElements(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawRangeElements(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        GLuint a2;
        GLsizei a3;
        GLenum a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuuiuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 534 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, a4, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDrawRangeElements(a0, a1, a2, a3, a4, array);
#line 2549 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawRangeElements, doc_QOpenGLFunctions_2_1_glDrawRangeElements);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBlendEquation, "QOpenGLFunctions_2_1.glBlendEquation(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBlendEquation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBlendEquation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glBlendEquation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBlendEquation, doc_QOpenGLFunctions_2_1_glBlendEquation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBlendColor, "QOpenGLFunctions_2_1.glBlendColor(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBlendColor(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBlendColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glBlendColor(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBlendColor, doc_QOpenGLFunctions_2_1_glBlendColor);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage1D, "QOpenGLFunctions_2_1.glCompressedTexSubImage1D(int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLsizei a3;
        GLenum a4;
        GLsizei a5;
        PyObject * a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipErrorState sipError = sipErrorNone;

#line 544 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a6, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexSubImage1D(a0, a1, a2, a3, a4, a5, array);
#line 2655 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexSubImage1D, doc_QOpenGLFunctions_2_1_glCompressedTexSubImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage2D, "QOpenGLFunctions_2_1.glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        GLsizei a5;
        GLenum a6;
        GLsizei a7;
        PyObject * a8;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 553 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexSubImage2D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 2706 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexSubImage2D, doc_QOpenGLFunctions_2_1_glCompressedTexSubImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage3D, "QOpenGLFunctions_2_1.glCompressedTexSubImage3D(int, int, int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage3D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexSubImage3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        GLsizei a5;
        GLsizei a6;
        GLsizei a7;
        GLenum a8;
        GLsizei a9;
        PyObject * a10;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiiiiiiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
        {
            sipErrorState sipError = sipErrorNone;

#line 562 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a10, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexSubImage3D(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9,
                array);
#line 2760 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexSubImage3D, doc_QOpenGLFunctions_2_1_glCompressedTexSubImage3D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexImage1D, "QOpenGLFunctions_2_1.glCompressedTexImage1D(int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLsizei a3;
        GLint a4;
        GLsizei a5;
        PyObject * a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuiiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipErrorState sipError = sipErrorNone;

#line 572 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a6, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexImage1D(a0, a1, a2, a3, a4, a5, array);
#line 2809 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexImage1D, doc_QOpenGLFunctions_2_1_glCompressedTexImage1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexImage2D, "QOpenGLFunctions_2_1.glCompressedTexImage2D(int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLsizei a3;
        GLsizei a4;
        GLint a5;
        GLsizei a6;
        PyObject * a7;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuiiiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
            sipErrorState sipError = sipErrorNone;

#line 581 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a7, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexImage2D(a0, a1, a2, a3, a4, a5, a6, array);
#line 2859 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexImage2D, doc_QOpenGLFunctions_2_1_glCompressedTexImage2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompressedTexImage3D, "QOpenGLFunctions_2_1.glCompressedTexImage3D(int, int, int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage3D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompressedTexImage3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLenum a2;
        GLsizei a3;
        GLsizei a4;
        GLsizei a5;
        GLint a6;
        GLsizei a7;
        PyObject * a8;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuiiiiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipErrorState sipError = sipErrorNone;

#line 590 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a8, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glCompressedTexImage3D(a0, a1, a2, a3, a4, a5, a6, a7, array);
#line 2910 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompressedTexImage3D, doc_QOpenGLFunctions_2_1_glCompressedTexImage3D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSampleCoverage, "QOpenGLFunctions_2_1.glSampleCoverage(float, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSampleCoverage(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSampleCoverage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLboolean a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glSampleCoverage(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSampleCoverage, doc_QOpenGLFunctions_2_1_glSampleCoverage);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glActiveTexture, "QOpenGLFunctions_2_1.glActiveTexture(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glActiveTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glActiveTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glActiveTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glActiveTexture, doc_QOpenGLFunctions_2_1_glActiveTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPointParameteriv, "QOpenGLFunctions_2_1.glPointParameteriv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPointParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPointParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 601 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPointParameteriv(a0, reinterpret_cast<const GLint *>(array));
#line 3008 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPointParameteriv, doc_QOpenGLFunctions_2_1_glPointParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPointParameteri, "QOpenGLFunctions_2_1.glPointParameteri(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPointParameteri(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPointParameteri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPointParameteri(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPointParameteri, doc_QOpenGLFunctions_2_1_glPointParameteri);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPointParameterfv, "QOpenGLFunctions_2_1.glPointParameterfv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPointParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPointParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 610 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPointParameterfv(a0, reinterpret_cast<const GLfloat *>(array));
#line 3079 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPointParameterfv, doc_QOpenGLFunctions_2_1_glPointParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPointParameterf, "QOpenGLFunctions_2_1.glPointParameterf(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPointParameterf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPointParameterf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPointParameterf(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPointParameterf, doc_QOpenGLFunctions_2_1_glPointParameterf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBlendFuncSeparate, "QOpenGLFunctions_2_1.glBlendFuncSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBlendFuncSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBlendFuncSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLenum a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glBlendFuncSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBlendFuncSeparate, doc_QOpenGLFunctions_2_1_glBlendFuncSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetBufferParameteriv, "QOpenGLFunctions_2_1.glGetBufferParameteriv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetBufferParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetBufferParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetBufferParameteriv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetBufferParameteriv, doc_QOpenGLFunctions_2_1_glGetBufferParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUnmapBuffer, "QOpenGLFunctions_2_1.glUnmapBuffer(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUnmapBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUnmapBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glUnmapBuffer(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUnmapBuffer, doc_QOpenGLFunctions_2_1_glUnmapBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBufferSubData, "QOpenGLFunctions_2_1.glBufferSubData(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBufferSubData(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBufferSubData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLintptr a1;
        GLsizeiptr a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BullP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 622 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array;
        
        if (a3 == Py_None)
            array = 0;
        else
            array = qpyopengl_value_array(&sipError, a3, GL_UNSIGNED_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glBufferSubData(a0, a1, a2, array);
#line 3247 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBufferSubData, doc_QOpenGLFunctions_2_1_glBufferSubData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBufferData, "QOpenGLFunctions_2_1.glBufferData(int, int, sequence-or-buffer, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBufferData(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBufferData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizeiptr a1;
        PyObject * a2;
        GLenum a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BulP0u", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 635 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array;
        
        if (a2 == Py_None)
            array = 0;
        else
            array = qpyopengl_value_array(&sipError, a2, GL_UNSIGNED_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glBufferData(a0, a1, array, a3);
#line 3297 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBufferData, doc_QOpenGLFunctions_2_1_glBufferData);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsBuffer, "QOpenGLFunctions_2_1.glIsBuffer(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsBuffer(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsBuffer, doc_QOpenGLFunctions_2_1_glIsBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGenBuffers, "QOpenGLFunctions_2_1.glGenBuffers(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGenBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGenBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 649 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenBuffers(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 3375 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGenBuffers, doc_QOpenGLFunctions_2_1_glGenBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteBuffers, "QOpenGLFunctions_2_1.glDeleteBuffers(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 660 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteBuffers(a0, reinterpret_cast<const GLuint *>(array));
#line 3413 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteBuffers, doc_QOpenGLFunctions_2_1_glDeleteBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBindBuffer, "QOpenGLFunctions_2_1.glBindBuffer(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glBindBuffer(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBindBuffer, doc_QOpenGLFunctions_2_1_glBindBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetQueryiv, "QOpenGLFunctions_2_1.glGetQueryiv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetQueryiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetQueryiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetQueryiv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetQueryiv, doc_QOpenGLFunctions_2_1_glGetQueryiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEndQuery, "QOpenGLFunctions_2_1.glEndQuery(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEndQuery(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEndQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEndQuery(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEndQuery, doc_QOpenGLFunctions_2_1_glEndQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBeginQuery, "QOpenGLFunctions_2_1.glBeginQuery(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBeginQuery(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBeginQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glBeginQuery(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBeginQuery, doc_QOpenGLFunctions_2_1_glBeginQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsQuery, "QOpenGLFunctions_2_1.glIsQuery(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsQuery(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsQuery(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsQuery, doc_QOpenGLFunctions_2_1_glIsQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteQueries, "QOpenGLFunctions_2_1.glDeleteQueries(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteQueries(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteQueries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 674 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDeleteQueries(a0, reinterpret_cast<const GLuint *>(array));
#line 3600 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteQueries, doc_QOpenGLFunctions_2_1_glDeleteQueries);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGenQueries, "QOpenGLFunctions_2_1.glGenQueries(int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGenQueries(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGenQueries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 683 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLuint *params = new GLuint[a0];
            
        sipCpp->glGenQueries(a0, params);
        
        a1 = qpyopengl_from_GLuint(&sipIsErr, params, a0);
        
        delete[] params;
#line 3646 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGenQueries, doc_QOpenGLFunctions_2_1_glGenQueries);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttribPointer, "QOpenGLFunctions_2_1.glVertexAttribPointer(int, int, int, int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttribPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttribPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLint a1;
        GLenum a2;
        GLboolean a3;
        GLsizei a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuMiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 694 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a5, a2, sipSelf,
                "VertexAttribPointer", a0);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttribPointer(a0, a1, a2, a3, a4, array);
#line 3688 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttribPointer, doc_QOpenGLFunctions_2_1_glVertexAttribPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glValidateProgram, "QOpenGLFunctions_2_1.glValidateProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glValidateProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glValidateProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glValidateProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glValidateProgram, doc_QOpenGLFunctions_2_1_glValidateProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniformMatrix4fv, "QOpenGLFunctions_2_1.glUniformMatrix4fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 704 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix4fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 3761 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniformMatrix4fv, doc_QOpenGLFunctions_2_1_glUniformMatrix4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniformMatrix3fv, "QOpenGLFunctions_2_1.glUniformMatrix3fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 713 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix3fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 3807 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniformMatrix3fv, doc_QOpenGLFunctions_2_1_glUniformMatrix3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniformMatrix2fv, "QOpenGLFunctions_2_1.glUniformMatrix2fv(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniformMatrix2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        GLboolean a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiMP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 722 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniformMatrix2fv(a0, a1, a2,
                    reinterpret_cast<const GLfloat *>(array));
#line 3853 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniformMatrix2fv, doc_QOpenGLFunctions_2_1_glUniformMatrix2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform4iv, "QOpenGLFunctions_2_1.glUniform4iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 731 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform4iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 3897 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform4iv, doc_QOpenGLFunctions_2_1_glUniform4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform3iv, "QOpenGLFunctions_2_1.glUniform3iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 739 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform3iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 3941 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform3iv, doc_QOpenGLFunctions_2_1_glUniform3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform2iv, "QOpenGLFunctions_2_1.glUniform2iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 747 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform2iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 3985 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform2iv, doc_QOpenGLFunctions_2_1_glUniform2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform1iv, "QOpenGLFunctions_2_1.glUniform1iv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform1iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform1iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 755 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform1iv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 4029 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform1iv, doc_QOpenGLFunctions_2_1_glUniform1iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform4fv, "QOpenGLFunctions_2_1.glUniform4fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 763 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform4fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4073 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform4fv, doc_QOpenGLFunctions_2_1_glUniform4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform3fv, "QOpenGLFunctions_2_1.glUniform3fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 771 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform3fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4117 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform3fv, doc_QOpenGLFunctions_2_1_glUniform3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform2fv, "QOpenGLFunctions_2_1.glUniform2fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 779 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform2fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4161 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform2fv, doc_QOpenGLFunctions_2_1_glUniform2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform1fv, "QOpenGLFunctions_2_1.glUniform1fv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 787 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glUniform1fv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 4205 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform1fv, doc_QOpenGLFunctions_2_1_glUniform1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform4i, "QOpenGLFunctions_2_1.glUniform4i(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glUniform4i(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform4i, doc_QOpenGLFunctions_2_1_glUniform4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform3i, "QOpenGLFunctions_2_1.glUniform3i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glUniform3i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform3i, doc_QOpenGLFunctions_2_1_glUniform3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform2i, "QOpenGLFunctions_2_1.glUniform2i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glUniform2i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform2i, doc_QOpenGLFunctions_2_1_glUniform2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform1i, "QOpenGLFunctions_2_1.glUniform1i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform1i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform1i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glUniform1i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform1i, doc_QOpenGLFunctions_2_1_glUniform1i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform4f, "QOpenGLFunctions_2_1.glUniform4f(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glUniform4f(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform4f, doc_QOpenGLFunctions_2_1_glUniform4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform3f, "QOpenGLFunctions_2_1.glUniform3f(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glUniform3f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform3f, doc_QOpenGLFunctions_2_1_glUniform3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform2f, "QOpenGLFunctions_2_1.glUniform2f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glUniform2f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform2f, doc_QOpenGLFunctions_2_1_glUniform2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUniform1f, "QOpenGLFunctions_2_1.glUniform1f(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUniform1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUniform1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glUniform1f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUniform1f, doc_QOpenGLFunctions_2_1_glUniform1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glUseProgram, "QOpenGLFunctions_2_1.glUseProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glUseProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glUseProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glUseProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glUseProgram, doc_QOpenGLFunctions_2_1_glUseProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLinkProgram, "QOpenGLFunctions_2_1.glLinkProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLinkProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLinkProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glLinkProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLinkProgram, doc_QOpenGLFunctions_2_1_glLinkProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsShader, "QOpenGLFunctions_2_1.glIsShader(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsShader(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsShader, doc_QOpenGLFunctions_2_1_glIsShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsProgram, "QOpenGLFunctions_2_1.glIsProgram(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsProgram(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsProgram, doc_QOpenGLFunctions_2_1_glIsProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetVertexAttribiv, "QOpenGLFunctions_2_1.glGetVertexAttribiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 807 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CURRENT_VERTEX_ATTRIB:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetVertexAttribiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 4615 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetVertexAttribiv, doc_QOpenGLFunctions_2_1_glGetVertexAttribiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetVertexAttribfv, "QOpenGLFunctions_2_1.glGetVertexAttribfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 827 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CURRENT_VERTEX_ATTRIB:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetVertexAttribfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 4665 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetVertexAttribfv, doc_QOpenGLFunctions_2_1_glGetVertexAttribfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetVertexAttribdv, "QOpenGLFunctions_2_1.glGetVertexAttribdv(int, int) -> double-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribdv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetVertexAttribdv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 847 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLdouble params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CURRENT_VERTEX_ATTRIB:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetVertexAttribdv(a0, a1, params);
        
        a2 = qpyopengl_from_GLdouble(&sipIsErr, params, nr_params);
#line 4715 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetVertexAttribdv, doc_QOpenGLFunctions_2_1_glGetVertexAttribdv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetUniformLocation, "QOpenGLFunctions_2_1.glGetUniformLocation(int, str) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetUniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetUniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        const GLchar* a1;
        PyObject *a1Keep;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuAA", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1Keep, &a1))
        {
            GLint sipRes;

            sipRes = sipCpp->glGetUniformLocation(a0,a1);
            Py_DECREF(a1Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetUniformLocation, doc_QOpenGLFunctions_2_1_glGetUniformLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetShaderSource, "QOpenGLFunctions_2_1.glGetShaderSource(int) -> bytes");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderSource(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 868 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint bufsize;
        
        sipCpp->glGetShaderiv(a0, GL_SHADER_SOURCE_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *source = new GLchar[bufsize];
        
            sipCpp->glGetShaderSource(a0, bufsize, 0, source);
            sipRes = SIPBytes_FromString(source);
        
            delete[] source;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 4795 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetShaderSource, doc_QOpenGLFunctions_2_1_glGetShaderSource);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetShaderInfoLog, "QOpenGLFunctions_2_1.glGetShaderInfoLog(int) -> bytes");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderInfoLog(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderInfoLog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 889 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint bufsize;
        
        sipCpp->glGetShaderiv(a0, GL_INFO_LOG_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *log = new GLchar[bufsize];
        
            sipCpp->glGetShaderInfoLog(a0, bufsize, 0, log);
            sipRes = SIPBytes_FromString(log);
        
            delete[] log;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 4841 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetShaderInfoLog, doc_QOpenGLFunctions_2_1_glGetShaderInfoLog);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetShaderiv, "QOpenGLFunctions_2_1.glGetShaderiv(int, int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetShaderiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glGetShaderiv(a0,a1,&a2);

            return SIPLong_FromLong(a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetShaderiv, doc_QOpenGLFunctions_2_1_glGetShaderiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetProgramInfoLog, "QOpenGLFunctions_2_1.glGetProgramInfoLog(int) -> bytes");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetProgramInfoLog(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetProgramInfoLog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;

#line 911 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_INFO_LOG_LENGTH, &bufsize);
        
        if (bufsize > 0)
        {
            GLchar *log = new GLchar[bufsize];
        
            sipCpp->glGetProgramInfoLog(a0, bufsize, 0, log);
            sipRes = SIPBytes_FromString(log);
        
            delete[] log;
        }
        else
        {
            sipRes = SIPBytes_FromString("");
        }
#line 4915 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetProgramInfoLog, doc_QOpenGLFunctions_2_1_glGetProgramInfoLog);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetProgramiv, "QOpenGLFunctions_2_1.glGetProgramiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetProgramiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetProgramiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 932 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[3];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        #if defined(GL_COMPUTE_LOCAL_WORK_SIZE)
        case GL_COMPUTE_LOCAL_WORK_SIZE:
            nr_params = 3;
            break;
        #endif
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetProgramiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 4964 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetProgramiv, doc_QOpenGLFunctions_2_1_glGetProgramiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetAttribLocation, "QOpenGLFunctions_2_1.glGetAttribLocation(int, str) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetAttribLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetAttribLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        const GLchar* a1;
        PyObject *a1Keep;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuAA", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1Keep, &a1))
        {
            GLint sipRes;

            sipRes = sipCpp->glGetAttribLocation(a0,a1);
            Py_DECREF(a1Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetAttribLocation, doc_QOpenGLFunctions_2_1_glGetAttribLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetAttachedShaders, "QOpenGLFunctions_2_1.glGetAttachedShaders(int) -> tuple-of-int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetAttachedShaders(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetAttachedShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 955 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint nr_shaders;
        
        sipCpp->glGetProgramiv(a0, GL_ATTACHED_SHADERS, &nr_shaders);
        
        if (nr_shaders < 1)
        {
            sipRes = PyTuple_New(0);
        }
        else
        {
            GLuint *shaders = new GLuint[nr_shaders];
        
            sipCpp->glGetAttachedShaders(a0, nr_shaders, 0, shaders);
        
            sipRes = PyTuple_New(nr_shaders);
        
            if (sipRes)
            {
                for (GLint i = 0; i < nr_shaders; ++i)
                {
                    PyObject *itm = SIPLong_FromLong(shaders[i]);
                    
                    if (!itm)
                    {
                        Py_DECREF(sipRes);
                        sipRes = 0;
                        break;
                    }
                    
                    PyTuple_SET_ITEM(sipRes, i, itm);
                }
            }
        
            delete[] shaders;
        }
        
        if (!sipRes)
            sipIsErr = 1;
#line 5066 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetAttachedShaders, doc_QOpenGLFunctions_2_1_glGetAttachedShaders);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetActiveUniform, "QOpenGLFunctions_2_1.glGetActiveUniform(int, int) -> str, int, int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetActiveUniform(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetActiveUniform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 997 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_ACTIVE_UNIFORM_MAX_LENGTH, &bufsize);
        
        GLchar *name = new GLchar[bufsize];
        GLint size;
        GLenum type;
        
        sipCpp->glGetActiveUniform(a0, a1, bufsize, 0, &size, &type, name);
        
        sipRes = Py_BuildValue("siI", name, size, type);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] name;
#line 5116 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetActiveUniform, doc_QOpenGLFunctions_2_1_glGetActiveUniform);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetActiveAttrib, "QOpenGLFunctions_2_1.glGetActiveAttrib(int, int) -> str, int, int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetActiveAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetActiveAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 1017 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint bufsize;
        
        sipCpp->glGetProgramiv(a0, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &bufsize);
        
        GLchar *name = new GLchar[bufsize];
        GLint size;
        GLenum type;
        
        sipCpp->glGetActiveAttrib(a0, a1, bufsize, 0, &size, &type, name);
        
        sipRes = Py_BuildValue("siI", name, size, type);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] name;
#line 5166 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetActiveAttrib, doc_QOpenGLFunctions_2_1_glGetActiveAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEnableVertexAttribArray, "QOpenGLFunctions_2_1.glEnableVertexAttribArray(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEnableVertexAttribArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEnableVertexAttribArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEnableVertexAttribArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEnableVertexAttribArray, doc_QOpenGLFunctions_2_1_glEnableVertexAttribArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDisableVertexAttribArray, "QOpenGLFunctions_2_1.glDisableVertexAttribArray(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDisableVertexAttribArray(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDisableVertexAttribArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDisableVertexAttribArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDisableVertexAttribArray, doc_QOpenGLFunctions_2_1_glDisableVertexAttribArray);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDetachShader, "QOpenGLFunctions_2_1.glDetachShader(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDetachShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDetachShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glDetachShader(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDetachShader, doc_QOpenGLFunctions_2_1_glDetachShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteShader, "QOpenGLFunctions_2_1.glDeleteShader(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDeleteShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteShader, doc_QOpenGLFunctions_2_1_glDeleteShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteProgram, "QOpenGLFunctions_2_1.glDeleteProgram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDeleteProgram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteProgram, doc_QOpenGLFunctions_2_1_glDeleteProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCreateShader, "QOpenGLFunctions_2_1.glCreateShader(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCreateShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCreateShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLuint sipRes;

            sipRes = sipCpp->glCreateShader(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCreateShader, doc_QOpenGLFunctions_2_1_glCreateShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCreateProgram, "QOpenGLFunctions_2_1.glCreateProgram() -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCreateProgram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCreateProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->glCreateProgram();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCreateProgram, doc_QOpenGLFunctions_2_1_glCreateProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCompileShader, "QOpenGLFunctions_2_1.glCompileShader(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCompileShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCompileShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glCompileShader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCompileShader, doc_QOpenGLFunctions_2_1_glCompileShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBindAttribLocation, "QOpenGLFunctions_2_1.glBindAttribLocation(int, int, str)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBindAttribLocation(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBindAttribLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        const GLchar* a2;
        PyObject *a2Keep;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuAA", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2Keep, &a2))
        {
            sipCpp->glBindAttribLocation(a0,a1,a2);
            Py_DECREF(a2Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBindAttribLocation, doc_QOpenGLFunctions_2_1_glBindAttribLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glAttachShader, "QOpenGLFunctions_2_1.glAttachShader(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glAttachShader(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glAttachShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glAttachShader(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glAttachShader, doc_QOpenGLFunctions_2_1_glAttachShader);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilMaskSeparate, "QOpenGLFunctions_2_1.glStencilMaskSeparate(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilMaskSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilMaskSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLuint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glStencilMaskSeparate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilMaskSeparate, doc_QOpenGLFunctions_2_1_glStencilMaskSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilFuncSeparate, "QOpenGLFunctions_2_1.glStencilFuncSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilFuncSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilFuncSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        GLuint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuiu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glStencilFuncSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilFuncSeparate, doc_QOpenGLFunctions_2_1_glStencilFuncSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glStencilOpSeparate, "QOpenGLFunctions_2_1.glStencilOpSeparate(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glStencilOpSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glStencilOpSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLenum a2;
        GLenum a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glStencilOpSeparate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glStencilOpSeparate, doc_QOpenGLFunctions_2_1_glStencilOpSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawBuffers, "QOpenGLFunctions_2_1.glDrawBuffers(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1050 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDrawBuffers(a0, reinterpret_cast<const GLenum *>(array));
#line 5569 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawBuffers, doc_QOpenGLFunctions_2_1_glDrawBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBlendEquationSeparate, "QOpenGLFunctions_2_1.glBlendEquationSeparate(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBlendEquationSeparate(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBlendEquationSeparate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glBlendEquationSeparate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBlendEquationSeparate, doc_QOpenGLFunctions_2_1_glBlendEquationSeparate);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTranslatef, "QOpenGLFunctions_2_1.glTranslatef(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTranslatef(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTranslatef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTranslatef(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTranslatef, doc_QOpenGLFunctions_2_1_glTranslatef);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTranslated, "QOpenGLFunctions_2_1.glTranslated(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTranslated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTranslated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTranslated(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTranslated, doc_QOpenGLFunctions_2_1_glTranslated);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glScalef, "QOpenGLFunctions_2_1.glScalef(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glScalef(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glScalef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glScalef(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glScalef, doc_QOpenGLFunctions_2_1_glScalef);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glScaled, "QOpenGLFunctions_2_1.glScaled(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glScaled(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glScaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glScaled(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glScaled, doc_QOpenGLFunctions_2_1_glScaled);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRotatef, "QOpenGLFunctions_2_1.glRotatef(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRotatef(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRotatef(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRotatef(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRotatef, doc_QOpenGLFunctions_2_1_glRotatef);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRotated, "QOpenGLFunctions_2_1.glRotated(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRotated(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRotated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRotated(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRotated, doc_QOpenGLFunctions_2_1_glRotated);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPushMatrix, "QOpenGLFunctions_2_1.glPushMatrix()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPushMatrix(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPushMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glPushMatrix();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPushMatrix, doc_QOpenGLFunctions_2_1_glPushMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPopMatrix, "QOpenGLFunctions_2_1.glPopMatrix()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPopMatrix(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPopMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glPopMatrix();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPopMatrix, doc_QOpenGLFunctions_2_1_glPopMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glOrtho, "QOpenGLFunctions_2_1.glOrtho(float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glOrtho(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glOrtho(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        GLdouble a4;
        GLdouble a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glOrtho(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glOrtho, doc_QOpenGLFunctions_2_1_glOrtho);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultMatrixd, "QOpenGLFunctions_2_1.glMultMatrixd(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultMatrixd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultMatrixd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1069 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultMatrixd(reinterpret_cast<const GLdouble *>(array));
#line 5899 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultMatrixd, doc_QOpenGLFunctions_2_1_glMultMatrixd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultMatrixf, "QOpenGLFunctions_2_1.glMultMatrixf(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultMatrixf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultMatrixf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1077 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultMatrixf(reinterpret_cast<const GLfloat *>(array));
#line 5941 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultMatrixf, doc_QOpenGLFunctions_2_1_glMultMatrixf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMatrixMode, "QOpenGLFunctions_2_1.glMatrixMode(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMatrixMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMatrixMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glMatrixMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMatrixMode, doc_QOpenGLFunctions_2_1_glMatrixMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadMatrixd, "QOpenGLFunctions_2_1.glLoadMatrixd(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadMatrixd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadMatrixd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1086 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLoadMatrixd(reinterpret_cast<const GLdouble *>(array));
#line 6010 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadMatrixd, doc_QOpenGLFunctions_2_1_glLoadMatrixd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadMatrixf, "QOpenGLFunctions_2_1.glLoadMatrixf(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadMatrixf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadMatrixf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1094 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLoadMatrixf(reinterpret_cast<const GLfloat *>(array));
#line 6052 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadMatrixf, doc_QOpenGLFunctions_2_1_glLoadMatrixf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadIdentity, "QOpenGLFunctions_2_1.glLoadIdentity()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadIdentity(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glLoadIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadIdentity, doc_QOpenGLFunctions_2_1_glLoadIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFrustum, "QOpenGLFunctions_2_1.glFrustum(float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFrustum(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFrustum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        GLdouble a4;
        GLdouble a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glFrustum(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFrustum, doc_QOpenGLFunctions_2_1_glFrustum);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIsList, "QOpenGLFunctions_2_1.glIsList(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIsList(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIsList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLboolean sipRes;

            sipRes = sipCpp->glIsList(a0);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIsList, doc_QOpenGLFunctions_2_1_glIsList);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexGeniv, "QOpenGLFunctions_2_1.glGetTexGeniv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGeniv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGeniv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1105 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_OBJECT_PLANE:
        case GL_EYE_PLANE:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexGeniv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 6199 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexGeniv, doc_QOpenGLFunctions_2_1_glGetTexGeniv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexGenfv, "QOpenGLFunctions_2_1.glGetTexGenfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGenfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGenfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1126 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_OBJECT_PLANE:
        case GL_EYE_PLANE:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexGenfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 6250 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexGenfv, doc_QOpenGLFunctions_2_1_glGetTexGenfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexGendv, "QOpenGLFunctions_2_1.glGetTexGendv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGendv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexGendv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1147 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLdouble params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_OBJECT_PLANE:
        case GL_EYE_PLANE:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexGendv(a0, a1, params);
        
        a2 = qpyopengl_from_GLdouble(&sipIsErr, params, nr_params);
#line 6301 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexGendv, doc_QOpenGLFunctions_2_1_glGetTexGendv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexEnviv, "QOpenGLFunctions_2_1.glGetTexEnviv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexEnviv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexEnviv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1168 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_TEXTURE_ENV_COLOR:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexEnviv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 6351 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexEnviv, doc_QOpenGLFunctions_2_1_glGetTexEnviv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetTexEnvfv, "QOpenGLFunctions_2_1.glGetTexEnvfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetTexEnvfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetTexEnvfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1188 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_TEXTURE_ENV_COLOR:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetTexEnvfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 6401 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetTexEnvfv, doc_QOpenGLFunctions_2_1_glGetTexEnvfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetMaterialiv, "QOpenGLFunctions_2_1.glGetMaterialiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetMaterialiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetMaterialiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1208 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_SHININESS:
            nr_params = 1;
            break;
        
        case GL_COLOR_INDEXES:
            nr_params = 3;
            break;
        
        default:
            nr_params = 4;
        }
        
        sipCpp->glGetMaterialiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 6455 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetMaterialiv, doc_QOpenGLFunctions_2_1_glGetMaterialiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetMaterialfv, "QOpenGLFunctions_2_1.glGetMaterialfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetMaterialfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetMaterialfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1232 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_SHININESS:
            nr_params = 1;
            break;
        
        case GL_COLOR_INDEXES:
            nr_params = 3;
            break;
        
        default:
            nr_params = 4;
        }
        
        sipCpp->glGetMaterialfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 6509 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetMaterialfv, doc_QOpenGLFunctions_2_1_glGetMaterialfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetLightiv, "QOpenGLFunctions_2_1.glGetLightiv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetLightiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetLightiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1256 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_AMBIENT:
        case GL_DIFFUSE:
        case GL_SPECULAR:
        case GL_POSITION:
            nr_params = 4;
            break;
        
        case GL_SPOT_DIRECTION:
            nr_params = 3;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetLightiv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 6566 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetLightiv, doc_QOpenGLFunctions_2_1_glGetLightiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetLightfv, "QOpenGLFunctions_2_1.glGetLightfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetLightfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetLightfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 1283 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_AMBIENT:
        case GL_DIFFUSE:
        case GL_SPECULAR:
        case GL_POSITION:
            nr_params = 4;
            break;
        
        case GL_SPOT_DIRECTION:
            nr_params = 3;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetLightfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 6623 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetLightfv, doc_QOpenGLFunctions_2_1_glGetLightfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetClipPlane, "QOpenGLFunctions_2_1.glGetClipPlane(int) -> tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetClipPlane(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetClipPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            int sipIsErr = 0;

#line 1310 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLdouble params[4];
        
        sipCpp->glGetClipPlane(a0, params);
        
        a1 = qpyopengl_from_GLdouble(&sipIsErr, params, 4);
#line 6661 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a1;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetClipPlane, doc_QOpenGLFunctions_2_1_glGetClipPlane);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDrawPixels, "QOpenGLFunctions_2_1.glDrawPixels(int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDrawPixels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDrawPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        GLsizei a1;
        GLenum a2;
        GLenum a3;
        PyObject * a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipErrorState sipError = sipErrorNone;

#line 1319 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a4, a3, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glDrawPixels(a0, a1, a2, a3, array);
#line 6701 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDrawPixels, doc_QOpenGLFunctions_2_1_glDrawPixels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyPixels, "QOpenGLFunctions_2_1.glCopyPixels(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyPixels(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLsizei a2;
        GLsizei a3;
        GLenum a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glCopyPixels(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyPixels, doc_QOpenGLFunctions_2_1_glCopyPixels);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelMapusv, "QOpenGLFunctions_2_1.glPixelMapusv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapusv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapusv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1328 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPixelMapusv(a0, a1, reinterpret_cast<const GLushort *>(array));
#line 6777 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelMapusv, doc_QOpenGLFunctions_2_1_glPixelMapusv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelMapuiv, "QOpenGLFunctions_2_1.glPixelMapuiv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapuiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapuiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1337 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPixelMapuiv(a0, a1, reinterpret_cast<const GLuint *>(array));
#line 6822 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelMapuiv, doc_QOpenGLFunctions_2_1_glPixelMapuiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelMapfv, "QOpenGLFunctions_2_1.glPixelMapfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelMapfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1346 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPixelMapfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 6866 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelMapfv, doc_QOpenGLFunctions_2_1_glPixelMapfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelTransferi, "QOpenGLFunctions_2_1.glPixelTransferi(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelTransferi(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelTransferi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelTransferi(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelTransferi, doc_QOpenGLFunctions_2_1_glPixelTransferi);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelTransferf, "QOpenGLFunctions_2_1.glPixelTransferf(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelTransferf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelTransferf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelTransferf(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelTransferf, doc_QOpenGLFunctions_2_1_glPixelTransferf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPixelZoom, "QOpenGLFunctions_2_1.glPixelZoom(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPixelZoom(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPixelZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glPixelZoom(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPixelZoom, doc_QOpenGLFunctions_2_1_glPixelZoom);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glAlphaFunc, "QOpenGLFunctions_2_1.glAlphaFunc(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glAlphaFunc(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glAlphaFunc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glAlphaFunc(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glAlphaFunc, doc_QOpenGLFunctions_2_1_glAlphaFunc);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalPoint2, "QOpenGLFunctions_2_1.glEvalPoint2(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalPoint2(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalPoint2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glEvalPoint2(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalPoint2, doc_QOpenGLFunctions_2_1_glEvalPoint2);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalMesh2, "QOpenGLFunctions_2_1.glEvalMesh2(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalMesh2(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalMesh2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glEvalMesh2(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalMesh2, doc_QOpenGLFunctions_2_1_glEvalMesh2);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalPoint1, "QOpenGLFunctions_2_1.glEvalPoint1(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalPoint1(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalPoint1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEvalPoint1(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalPoint1, doc_QOpenGLFunctions_2_1_glEvalPoint1);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalMesh1, "QOpenGLFunctions_2_1.glEvalMesh1(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalMesh1(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalMesh1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glEvalMesh1(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalMesh1, doc_QOpenGLFunctions_2_1_glEvalMesh1);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord2fv, "QOpenGLFunctions_2_1.glEvalCoord2fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1362 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glEvalCoord2fv(reinterpret_cast<const GLfloat *>(array));
#line 7135 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord2fv, doc_QOpenGLFunctions_2_1_glEvalCoord2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord2f, "QOpenGLFunctions_2_1.glEvalCoord2f(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glEvalCoord2f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord2f, doc_QOpenGLFunctions_2_1_glEvalCoord2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord2dv, "QOpenGLFunctions_2_1.glEvalCoord2dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1371 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glEvalCoord2dv(reinterpret_cast<const GLdouble *>(array));
#line 7205 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord2dv, doc_QOpenGLFunctions_2_1_glEvalCoord2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord2d, "QOpenGLFunctions_2_1.glEvalCoord2d(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glEvalCoord2d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord2d, doc_QOpenGLFunctions_2_1_glEvalCoord2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord1fv, "QOpenGLFunctions_2_1.glEvalCoord1fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1380 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glEvalCoord1fv(reinterpret_cast<const GLfloat *>(array));
#line 7275 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord1fv, doc_QOpenGLFunctions_2_1_glEvalCoord1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord1f, "QOpenGLFunctions_2_1.glEvalCoord1f(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEvalCoord1f(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord1f, doc_QOpenGLFunctions_2_1_glEvalCoord1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord1dv, "QOpenGLFunctions_2_1.glEvalCoord1dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1389 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glEvalCoord1dv(reinterpret_cast<const GLdouble *>(array));
#line 7344 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord1dv, doc_QOpenGLFunctions_2_1_glEvalCoord1dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEvalCoord1d, "QOpenGLFunctions_2_1.glEvalCoord1d(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEvalCoord1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEvalCoord1d(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEvalCoord1d, doc_QOpenGLFunctions_2_1_glEvalCoord1d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMapGrid2f, "QOpenGLFunctions_2_1.glMapGrid2f(int, float, float, int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        GLint a3;
        GLfloat a4;
        GLfloat a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffiff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glMapGrid2f(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMapGrid2f, doc_QOpenGLFunctions_2_1_glMapGrid2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMapGrid2d, "QOpenGLFunctions_2_1.glMapGrid2d(int, float, float, int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLdouble a1;
        GLdouble a2;
        GLint a3;
        GLdouble a4;
        GLdouble a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biddidd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glMapGrid2d(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMapGrid2d, doc_QOpenGLFunctions_2_1_glMapGrid2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMapGrid1f, "QOpenGLFunctions_2_1.glMapGrid1f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMapGrid1f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMapGrid1f, doc_QOpenGLFunctions_2_1_glMapGrid1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMapGrid1d, "QOpenGLFunctions_2_1.glMapGrid1d(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMapGrid1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bidd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMapGrid1d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMapGrid1d, doc_QOpenGLFunctions_2_1_glMapGrid1d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMap2f, "QOpenGLFunctions_2_1.glMap2f(int, float, float, int, int, float, float, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMap2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMap2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        GLfloat a2;
        GLint a3;
        GLint a4;
        GLfloat a5;
        GLfloat a6;
        GLint a7;
        GLint a8;
        PyObject * a9;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuffiiffiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
        {
            sipErrorState sipError = sipErrorNone;

#line 1402 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a9, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMap2f(a0, a1, a2, a3, a4, a5, a6, a7, a8,
                    reinterpret_cast<const GLfloat *>(array));
#line 7545 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMap2f, doc_QOpenGLFunctions_2_1_glMap2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMap2d, "QOpenGLFunctions_2_1.glMap2d(int, float, float, int, int, float, float, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMap2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMap2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        GLdouble a2;
        GLint a3;
        GLint a4;
        GLdouble a5;
        GLdouble a6;
        GLint a7;
        GLint a8;
        PyObject * a9;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuddiiddiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
        {
            sipErrorState sipError = sipErrorNone;

#line 1411 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a9, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMap2d(a0, a1, a2, a3, a4, a5, a6, a7, a8,
                    reinterpret_cast<const GLdouble *>(array));
#line 7597 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMap2d, doc_QOpenGLFunctions_2_1_glMap2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMap1f, "QOpenGLFunctions_2_1.glMap1f(int, float, float, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMap1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMap1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        GLfloat a2;
        GLint a3;
        GLint a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuffiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 1420 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMap1f(a0, a1, a2, a3, a4,
                    reinterpret_cast<const GLfloat *>(array));
#line 7645 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMap1f, doc_QOpenGLFunctions_2_1_glMap1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMap1d, "QOpenGLFunctions_2_1.glMap1d(int, float, float, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMap1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMap1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        GLdouble a2;
        GLint a3;
        GLint a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuddiiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 1429 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMap1d(a0, a1, a2, a3, a4,
                    reinterpret_cast<const GLdouble *>(array));
#line 7693 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMap1d, doc_QOpenGLFunctions_2_1_glMap1d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPushAttrib, "QOpenGLFunctions_2_1.glPushAttrib(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPushAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPushAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbitfield a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glPushAttrib(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPushAttrib, doc_QOpenGLFunctions_2_1_glPushAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPopAttrib, "QOpenGLFunctions_2_1.glPopAttrib()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPopAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPopAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glPopAttrib();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPopAttrib, doc_QOpenGLFunctions_2_1_glPopAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glAccum, "QOpenGLFunctions_2_1.glAccum(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glAccum(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glAccum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glAccum(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glAccum, doc_QOpenGLFunctions_2_1_glAccum);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexMask, "QOpenGLFunctions_2_1.glIndexMask(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexMask(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexMask(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexMask, doc_QOpenGLFunctions_2_1_glIndexMask);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClearIndex, "QOpenGLFunctions_2_1.glClearIndex(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClearIndex(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClearIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glClearIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClearIndex, doc_QOpenGLFunctions_2_1_glClearIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClearAccum, "QOpenGLFunctions_2_1.glClearAccum(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClearAccum(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClearAccum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glClearAccum(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClearAccum, doc_QOpenGLFunctions_2_1_glClearAccum);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPushName, "QOpenGLFunctions_2_1.glPushName(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPushName(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPushName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glPushName(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPushName, doc_QOpenGLFunctions_2_1_glPushName);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPopName, "QOpenGLFunctions_2_1.glPopName()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPopName(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPopName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glPopName();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPopName, doc_QOpenGLFunctions_2_1_glPopName);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPassThrough, "QOpenGLFunctions_2_1.glPassThrough(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPassThrough(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPassThrough(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glPassThrough(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPassThrough, doc_QOpenGLFunctions_2_1_glPassThrough);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadName, "QOpenGLFunctions_2_1.glLoadName(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadName(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glLoadName(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadName, doc_QOpenGLFunctions_2_1_glLoadName);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glInitNames, "QOpenGLFunctions_2_1.glInitNames()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glInitNames(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glInitNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glInitNames();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glInitNames, doc_QOpenGLFunctions_2_1_glInitNames);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRenderMode, "QOpenGLFunctions_2_1.glRenderMode(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRenderMode(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRenderMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLint sipRes;

            sipRes = sipCpp->glRenderMode(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRenderMode, doc_QOpenGLFunctions_2_1_glRenderMode);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGeniv, "QOpenGLFunctions_2_1.glTexGeniv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGeniv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGeniv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1450 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexGeniv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 8063 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGeniv, doc_QOpenGLFunctions_2_1_glTexGeniv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGeni, "QOpenGLFunctions_2_1.glTexGeni(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGeni(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGeni(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexGeni(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGeni, doc_QOpenGLFunctions_2_1_glTexGeni);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGenfv, "QOpenGLFunctions_2_1.glTexGenfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGenfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGenfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1459 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexGenfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 8136 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGenfv, doc_QOpenGLFunctions_2_1_glTexGenfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGenf, "QOpenGLFunctions_2_1.glTexGenf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGenf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGenf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexGenf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGenf, doc_QOpenGLFunctions_2_1_glTexGenf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGendv, "QOpenGLFunctions_2_1.glTexGendv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGendv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGendv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1468 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexGendv(a0, a1, reinterpret_cast<const GLdouble *>(array));
#line 8209 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGendv, doc_QOpenGLFunctions_2_1_glTexGendv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexGend, "QOpenGLFunctions_2_1.glTexGend(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexGend(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexGend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buud", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexGend(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexGend, doc_QOpenGLFunctions_2_1_glTexGend);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexEnviv, "QOpenGLFunctions_2_1.glTexEnviv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexEnviv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexEnviv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1477 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexEnviv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 8282 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexEnviv, doc_QOpenGLFunctions_2_1_glTexEnviv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexEnvi, "QOpenGLFunctions_2_1.glTexEnvi(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvi(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexEnvi(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexEnvi, doc_QOpenGLFunctions_2_1_glTexEnvi);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexEnvfv, "QOpenGLFunctions_2_1.glTexEnvfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1486 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexEnvfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 8355 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexEnvfv, doc_QOpenGLFunctions_2_1_glTexEnvfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexEnvf, "QOpenGLFunctions_2_1.glTexEnvf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexEnvf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexEnvf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexEnvf, doc_QOpenGLFunctions_2_1_glTexEnvf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glShadeModel, "QOpenGLFunctions_2_1.glShadeModel(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glShadeModel(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glShadeModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glShadeModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glShadeModel, doc_QOpenGLFunctions_2_1_glShadeModel);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPolygonStipple, "QOpenGLFunctions_2_1.glPolygonStipple(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPolygonStipple(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPolygonStipple(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1496 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glPolygonStipple(reinterpret_cast<const GLubyte *>(array));
#line 8454 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPolygonStipple, doc_QOpenGLFunctions_2_1_glPolygonStipple);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMaterialiv, "QOpenGLFunctions_2_1.glMaterialiv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMaterialiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMaterialiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1505 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMaterialiv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 8498 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMaterialiv, doc_QOpenGLFunctions_2_1_glMaterialiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMateriali, "QOpenGLFunctions_2_1.glMateriali(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMateriali(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMateriali(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMateriali(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMateriali, doc_QOpenGLFunctions_2_1_glMateriali);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMaterialfv, "QOpenGLFunctions_2_1.glMaterialfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMaterialfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMaterialfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1514 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMaterialfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 8571 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMaterialfv, doc_QOpenGLFunctions_2_1_glMaterialfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMaterialf, "QOpenGLFunctions_2_1.glMaterialf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMaterialf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMaterialf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMaterialf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMaterialf, doc_QOpenGLFunctions_2_1_glMaterialf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLineStipple, "QOpenGLFunctions_2_1.glLineStipple(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLineStipple(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLineStipple(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLushort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bit", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glLineStipple(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLineStipple, doc_QOpenGLFunctions_2_1_glLineStipple);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightModeliv, "QOpenGLFunctions_2_1.glLightModeliv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightModeliv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightModeliv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1524 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLightModeliv(a0, reinterpret_cast<const GLint *>(array));
#line 8671 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightModeliv, doc_QOpenGLFunctions_2_1_glLightModeliv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightModeli, "QOpenGLFunctions_2_1.glLightModeli(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightModeli(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightModeli(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glLightModeli(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightModeli, doc_QOpenGLFunctions_2_1_glLightModeli);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightModelfv, "QOpenGLFunctions_2_1.glLightModelfv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightModelfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightModelfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1533 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLightModelfv(a0, reinterpret_cast<const GLfloat *>(array));
#line 8742 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightModelfv, doc_QOpenGLFunctions_2_1_glLightModelfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightModelf, "QOpenGLFunctions_2_1.glLightModelf(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightModelf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightModelf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glLightModelf(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightModelf, doc_QOpenGLFunctions_2_1_glLightModelf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightiv, "QOpenGLFunctions_2_1.glLightiv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1542 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLightiv(a0, a1, reinterpret_cast<const GLint *>(array));
#line 8814 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightiv, doc_QOpenGLFunctions_2_1_glLightiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLighti, "QOpenGLFunctions_2_1.glLighti(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLighti(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLighti(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glLighti(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLighti, doc_QOpenGLFunctions_2_1_glLighti);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightfv, "QOpenGLFunctions_2_1.glLightfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 1551 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLightfv(a0, a1, reinterpret_cast<const GLfloat *>(array));
#line 8887 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightfv, doc_QOpenGLFunctions_2_1_glLightfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLightf, "QOpenGLFunctions_2_1.glLightf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLightf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLightf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glLightf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLightf, doc_QOpenGLFunctions_2_1_glLightf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogiv, "QOpenGLFunctions_2_1.glFogiv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1560 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glFogiv(a0, reinterpret_cast<const GLint *>(array));
#line 8959 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogiv, doc_QOpenGLFunctions_2_1_glFogiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogi, "QOpenGLFunctions_2_1.glFogi(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogi(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glFogi(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogi, doc_QOpenGLFunctions_2_1_glFogi);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogfv, "QOpenGLFunctions_2_1.glFogfv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1569 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glFogfv(a0, reinterpret_cast<const GLfloat *>(array));
#line 9030 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogfv, doc_QOpenGLFunctions_2_1_glFogfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogf, "QOpenGLFunctions_2_1.glFogf(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glFogf(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogf, doc_QOpenGLFunctions_2_1_glFogf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorMaterial, "QOpenGLFunctions_2_1.glColorMaterial(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorMaterial(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorMaterial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glColorMaterial(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorMaterial, doc_QOpenGLFunctions_2_1_glColorMaterial);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClipPlane, "QOpenGLFunctions_2_1.glClipPlane(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClipPlane(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClipPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 1579 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glClipPlane(a0, reinterpret_cast<const GLdouble *>(array));
#line 9129 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClipPlane, doc_QOpenGLFunctions_2_1_glClipPlane);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4sv, "QOpenGLFunctions_2_1.glVertex4sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1587 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex4sv(reinterpret_cast<const GLshort *>(array));
#line 9171 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4sv, doc_QOpenGLFunctions_2_1_glVertex4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4s, "QOpenGLFunctions_2_1.glVertex4s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertex4s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4s, doc_QOpenGLFunctions_2_1_glVertex4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4iv, "QOpenGLFunctions_2_1.glVertex4iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1596 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex4iv(reinterpret_cast<const GLint *>(array));
#line 9243 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4iv, doc_QOpenGLFunctions_2_1_glVertex4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4i, "QOpenGLFunctions_2_1.glVertex4i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertex4i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4i, doc_QOpenGLFunctions_2_1_glVertex4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4fv, "QOpenGLFunctions_2_1.glVertex4fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1605 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex4fv(reinterpret_cast<const GLfloat *>(array));
#line 9315 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4fv, doc_QOpenGLFunctions_2_1_glVertex4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4f, "QOpenGLFunctions_2_1.glVertex4f(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertex4f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4f, doc_QOpenGLFunctions_2_1_glVertex4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4dv, "QOpenGLFunctions_2_1.glVertex4dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1614 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex4dv(reinterpret_cast<const GLdouble *>(array));
#line 9387 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4dv, doc_QOpenGLFunctions_2_1_glVertex4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex4d, "QOpenGLFunctions_2_1.glVertex4d(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertex4d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex4d, doc_QOpenGLFunctions_2_1_glVertex4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3sv, "QOpenGLFunctions_2_1.glVertex3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1623 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex3sv(reinterpret_cast<const GLshort *>(array));
#line 9459 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3sv, doc_QOpenGLFunctions_2_1_glVertex3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3s, "QOpenGLFunctions_2_1.glVertex3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertex3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3s, doc_QOpenGLFunctions_2_1_glVertex3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3iv, "QOpenGLFunctions_2_1.glVertex3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1632 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex3iv(reinterpret_cast<const GLint *>(array));
#line 9530 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3iv, doc_QOpenGLFunctions_2_1_glVertex3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3i, "QOpenGLFunctions_2_1.glVertex3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertex3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3i, doc_QOpenGLFunctions_2_1_glVertex3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3fv, "QOpenGLFunctions_2_1.glVertex3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1641 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex3fv(reinterpret_cast<const GLfloat *>(array));
#line 9601 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3fv, doc_QOpenGLFunctions_2_1_glVertex3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3f, "QOpenGLFunctions_2_1.glVertex3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertex3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3f, doc_QOpenGLFunctions_2_1_glVertex3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3dv, "QOpenGLFunctions_2_1.glVertex3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1650 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex3dv(reinterpret_cast<const GLdouble *>(array));
#line 9672 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3dv, doc_QOpenGLFunctions_2_1_glVertex3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex3d, "QOpenGLFunctions_2_1.glVertex3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertex3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex3d, doc_QOpenGLFunctions_2_1_glVertex3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2sv, "QOpenGLFunctions_2_1.glVertex2sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1659 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex2sv(reinterpret_cast<const GLshort *>(array));
#line 9743 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2sv, doc_QOpenGLFunctions_2_1_glVertex2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2s, "QOpenGLFunctions_2_1.glVertex2s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertex2s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2s, doc_QOpenGLFunctions_2_1_glVertex2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2iv, "QOpenGLFunctions_2_1.glVertex2iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1668 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex2iv(reinterpret_cast<const GLint *>(array));
#line 9813 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2iv, doc_QOpenGLFunctions_2_1_glVertex2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2i, "QOpenGLFunctions_2_1.glVertex2i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertex2i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2i, doc_QOpenGLFunctions_2_1_glVertex2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2fv, "QOpenGLFunctions_2_1.glVertex2fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1677 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex2fv(reinterpret_cast<const GLfloat *>(array));
#line 9883 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2fv, doc_QOpenGLFunctions_2_1_glVertex2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2f, "QOpenGLFunctions_2_1.glVertex2f(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertex2f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2f, doc_QOpenGLFunctions_2_1_glVertex2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2dv, "QOpenGLFunctions_2_1.glVertex2dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1686 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertex2dv(reinterpret_cast<const GLdouble *>(array));
#line 9953 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2dv, doc_QOpenGLFunctions_2_1_glVertex2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertex2d, "QOpenGLFunctions_2_1.glVertex2d(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertex2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertex2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertex2d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertex2d, doc_QOpenGLFunctions_2_1_glVertex2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4sv, "QOpenGLFunctions_2_1.glTexCoord4sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1695 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord4sv(reinterpret_cast<const GLshort *>(array));
#line 10023 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4sv, doc_QOpenGLFunctions_2_1_glTexCoord4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4s, "QOpenGLFunctions_2_1.glTexCoord4s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glTexCoord4s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4s, doc_QOpenGLFunctions_2_1_glTexCoord4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4iv, "QOpenGLFunctions_2_1.glTexCoord4iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1704 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord4iv(reinterpret_cast<const GLint *>(array));
#line 10095 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4iv, doc_QOpenGLFunctions_2_1_glTexCoord4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4i, "QOpenGLFunctions_2_1.glTexCoord4i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glTexCoord4i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4i, doc_QOpenGLFunctions_2_1_glTexCoord4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4fv, "QOpenGLFunctions_2_1.glTexCoord4fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1713 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord4fv(reinterpret_cast<const GLfloat *>(array));
#line 10167 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4fv, doc_QOpenGLFunctions_2_1_glTexCoord4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4f, "QOpenGLFunctions_2_1.glTexCoord4f(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glTexCoord4f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4f, doc_QOpenGLFunctions_2_1_glTexCoord4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4dv, "QOpenGLFunctions_2_1.glTexCoord4dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1722 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord4dv(reinterpret_cast<const GLdouble *>(array));
#line 10239 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4dv, doc_QOpenGLFunctions_2_1_glTexCoord4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord4d, "QOpenGLFunctions_2_1.glTexCoord4d(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glTexCoord4d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord4d, doc_QOpenGLFunctions_2_1_glTexCoord4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3sv, "QOpenGLFunctions_2_1.glTexCoord3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1731 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord3sv(reinterpret_cast<const GLshort *>(array));
#line 10311 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3sv, doc_QOpenGLFunctions_2_1_glTexCoord3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3s, "QOpenGLFunctions_2_1.glTexCoord3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexCoord3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3s, doc_QOpenGLFunctions_2_1_glTexCoord3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3iv, "QOpenGLFunctions_2_1.glTexCoord3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1740 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord3iv(reinterpret_cast<const GLint *>(array));
#line 10382 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3iv, doc_QOpenGLFunctions_2_1_glTexCoord3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3i, "QOpenGLFunctions_2_1.glTexCoord3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexCoord3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3i, doc_QOpenGLFunctions_2_1_glTexCoord3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3fv, "QOpenGLFunctions_2_1.glTexCoord3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1749 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord3fv(reinterpret_cast<const GLfloat *>(array));
#line 10453 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3fv, doc_QOpenGLFunctions_2_1_glTexCoord3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3f, "QOpenGLFunctions_2_1.glTexCoord3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexCoord3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3f, doc_QOpenGLFunctions_2_1_glTexCoord3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3dv, "QOpenGLFunctions_2_1.glTexCoord3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1758 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord3dv(reinterpret_cast<const GLdouble *>(array));
#line 10524 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3dv, doc_QOpenGLFunctions_2_1_glTexCoord3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord3d, "QOpenGLFunctions_2_1.glTexCoord3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glTexCoord3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord3d, doc_QOpenGLFunctions_2_1_glTexCoord3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2sv, "QOpenGLFunctions_2_1.glTexCoord2sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1767 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord2sv(reinterpret_cast<const GLshort *>(array));
#line 10595 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2sv, doc_QOpenGLFunctions_2_1_glTexCoord2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2s, "QOpenGLFunctions_2_1.glTexCoord2s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glTexCoord2s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2s, doc_QOpenGLFunctions_2_1_glTexCoord2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2iv, "QOpenGLFunctions_2_1.glTexCoord2iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1776 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord2iv(reinterpret_cast<const GLint *>(array));
#line 10665 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2iv, doc_QOpenGLFunctions_2_1_glTexCoord2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2i, "QOpenGLFunctions_2_1.glTexCoord2i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glTexCoord2i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2i, doc_QOpenGLFunctions_2_1_glTexCoord2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2fv, "QOpenGLFunctions_2_1.glTexCoord2fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1785 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord2fv(reinterpret_cast<const GLfloat *>(array));
#line 10735 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2fv, doc_QOpenGLFunctions_2_1_glTexCoord2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2f, "QOpenGLFunctions_2_1.glTexCoord2f(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glTexCoord2f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2f, doc_QOpenGLFunctions_2_1_glTexCoord2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2dv, "QOpenGLFunctions_2_1.glTexCoord2dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1794 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord2dv(reinterpret_cast<const GLdouble *>(array));
#line 10805 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2dv, doc_QOpenGLFunctions_2_1_glTexCoord2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord2d, "QOpenGLFunctions_2_1.glTexCoord2d(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glTexCoord2d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord2d, doc_QOpenGLFunctions_2_1_glTexCoord2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1sv, "QOpenGLFunctions_2_1.glTexCoord1sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1803 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord1sv(reinterpret_cast<const GLshort *>(array));
#line 10875 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1sv, doc_QOpenGLFunctions_2_1_glTexCoord1sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1s, "QOpenGLFunctions_2_1.glTexCoord1s(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glTexCoord1s(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1s, doc_QOpenGLFunctions_2_1_glTexCoord1s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1iv, "QOpenGLFunctions_2_1.glTexCoord1iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1812 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord1iv(reinterpret_cast<const GLint *>(array));
#line 10944 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1iv, doc_QOpenGLFunctions_2_1_glTexCoord1iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1i, "QOpenGLFunctions_2_1.glTexCoord1i(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glTexCoord1i(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1i, doc_QOpenGLFunctions_2_1_glTexCoord1i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1fv, "QOpenGLFunctions_2_1.glTexCoord1fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1821 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord1fv(reinterpret_cast<const GLfloat *>(array));
#line 11013 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1fv, doc_QOpenGLFunctions_2_1_glTexCoord1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1f, "QOpenGLFunctions_2_1.glTexCoord1f(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glTexCoord1f(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1f, doc_QOpenGLFunctions_2_1_glTexCoord1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1dv, "QOpenGLFunctions_2_1.glTexCoord1dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1830 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoord1dv(reinterpret_cast<const GLdouble *>(array));
#line 11082 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1dv, doc_QOpenGLFunctions_2_1_glTexCoord1dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoord1d, "QOpenGLFunctions_2_1.glTexCoord1d(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoord1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glTexCoord1d(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoord1d, doc_QOpenGLFunctions_2_1_glTexCoord1d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRects, "QOpenGLFunctions_2_1.glRects(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRects(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRects(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRects, doc_QOpenGLFunctions_2_1_glRects);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRecti, "QOpenGLFunctions_2_1.glRecti(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRecti(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRecti(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRecti(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRecti, doc_QOpenGLFunctions_2_1_glRecti);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRectf, "QOpenGLFunctions_2_1.glRectf(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRectf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRectf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRectf(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRectf, doc_QOpenGLFunctions_2_1_glRectf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRectd, "QOpenGLFunctions_2_1.glRectd(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRectd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRectd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRectd(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRectd, doc_QOpenGLFunctions_2_1_glRectd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4sv, "QOpenGLFunctions_2_1.glRasterPos4sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1843 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos4sv(reinterpret_cast<const GLshort *>(array));
#line 11271 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4sv, doc_QOpenGLFunctions_2_1_glRasterPos4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4s, "QOpenGLFunctions_2_1.glRasterPos4s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRasterPos4s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4s, doc_QOpenGLFunctions_2_1_glRasterPos4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4iv, "QOpenGLFunctions_2_1.glRasterPos4iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1852 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos4iv(reinterpret_cast<const GLint *>(array));
#line 11343 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4iv, doc_QOpenGLFunctions_2_1_glRasterPos4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4i, "QOpenGLFunctions_2_1.glRasterPos4i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRasterPos4i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4i, doc_QOpenGLFunctions_2_1_glRasterPos4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4fv, "QOpenGLFunctions_2_1.glRasterPos4fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1861 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos4fv(reinterpret_cast<const GLfloat *>(array));
#line 11415 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4fv, doc_QOpenGLFunctions_2_1_glRasterPos4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4f, "QOpenGLFunctions_2_1.glRasterPos4f(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRasterPos4f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4f, doc_QOpenGLFunctions_2_1_glRasterPos4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4dv, "QOpenGLFunctions_2_1.glRasterPos4dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1870 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos4dv(reinterpret_cast<const GLdouble *>(array));
#line 11487 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4dv, doc_QOpenGLFunctions_2_1_glRasterPos4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos4d, "QOpenGLFunctions_2_1.glRasterPos4d(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glRasterPos4d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos4d, doc_QOpenGLFunctions_2_1_glRasterPos4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3sv, "QOpenGLFunctions_2_1.glRasterPos3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1879 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos3sv(reinterpret_cast<const GLshort *>(array));
#line 11559 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3sv, doc_QOpenGLFunctions_2_1_glRasterPos3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3s, "QOpenGLFunctions_2_1.glRasterPos3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glRasterPos3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3s, doc_QOpenGLFunctions_2_1_glRasterPos3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3iv, "QOpenGLFunctions_2_1.glRasterPos3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1888 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos3iv(reinterpret_cast<const GLint *>(array));
#line 11630 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3iv, doc_QOpenGLFunctions_2_1_glRasterPos3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3i, "QOpenGLFunctions_2_1.glRasterPos3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glRasterPos3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3i, doc_QOpenGLFunctions_2_1_glRasterPos3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3fv, "QOpenGLFunctions_2_1.glRasterPos3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1897 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos3fv(reinterpret_cast<const GLfloat *>(array));
#line 11701 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3fv, doc_QOpenGLFunctions_2_1_glRasterPos3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3f, "QOpenGLFunctions_2_1.glRasterPos3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glRasterPos3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3f, doc_QOpenGLFunctions_2_1_glRasterPos3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3dv, "QOpenGLFunctions_2_1.glRasterPos3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1906 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos3dv(reinterpret_cast<const GLdouble *>(array));
#line 11772 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3dv, doc_QOpenGLFunctions_2_1_glRasterPos3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos3d, "QOpenGLFunctions_2_1.glRasterPos3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glRasterPos3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos3d, doc_QOpenGLFunctions_2_1_glRasterPos3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2sv, "QOpenGLFunctions_2_1.glRasterPos2sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1915 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos2sv(reinterpret_cast<const GLshort *>(array));
#line 11843 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2sv, doc_QOpenGLFunctions_2_1_glRasterPos2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2s, "QOpenGLFunctions_2_1.glRasterPos2s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glRasterPos2s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2s, doc_QOpenGLFunctions_2_1_glRasterPos2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2iv, "QOpenGLFunctions_2_1.glRasterPos2iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1924 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos2iv(reinterpret_cast<const GLint *>(array));
#line 11913 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2iv, doc_QOpenGLFunctions_2_1_glRasterPos2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2i, "QOpenGLFunctions_2_1.glRasterPos2i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glRasterPos2i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2i, doc_QOpenGLFunctions_2_1_glRasterPos2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2fv, "QOpenGLFunctions_2_1.glRasterPos2fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1933 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos2fv(reinterpret_cast<const GLfloat *>(array));
#line 11983 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2fv, doc_QOpenGLFunctions_2_1_glRasterPos2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2f, "QOpenGLFunctions_2_1.glRasterPos2f(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glRasterPos2f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2f, doc_QOpenGLFunctions_2_1_glRasterPos2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2dv, "QOpenGLFunctions_2_1.glRasterPos2dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1942 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glRasterPos2dv(reinterpret_cast<const GLdouble *>(array));
#line 12053 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2dv, doc_QOpenGLFunctions_2_1_glRasterPos2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glRasterPos2d, "QOpenGLFunctions_2_1.glRasterPos2d(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glRasterPos2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glRasterPos2d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glRasterPos2d, doc_QOpenGLFunctions_2_1_glRasterPos2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3sv, "QOpenGLFunctions_2_1.glNormal3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1951 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormal3sv(reinterpret_cast<const GLshort *>(array));
#line 12123 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3sv, doc_QOpenGLFunctions_2_1_glNormal3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3s, "QOpenGLFunctions_2_1.glNormal3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glNormal3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3s, doc_QOpenGLFunctions_2_1_glNormal3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3iv, "QOpenGLFunctions_2_1.glNormal3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1960 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormal3iv(reinterpret_cast<const GLint *>(array));
#line 12194 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3iv, doc_QOpenGLFunctions_2_1_glNormal3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3i, "QOpenGLFunctions_2_1.glNormal3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glNormal3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3i, doc_QOpenGLFunctions_2_1_glNormal3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3fv, "QOpenGLFunctions_2_1.glNormal3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1969 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormal3fv(reinterpret_cast<const GLfloat *>(array));
#line 12265 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3fv, doc_QOpenGLFunctions_2_1_glNormal3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3f, "QOpenGLFunctions_2_1.glNormal3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glNormal3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3f, doc_QOpenGLFunctions_2_1_glNormal3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3dv, "QOpenGLFunctions_2_1.glNormal3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1978 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormal3dv(reinterpret_cast<const GLdouble *>(array));
#line 12336 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3dv, doc_QOpenGLFunctions_2_1_glNormal3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3d, "QOpenGLFunctions_2_1.glNormal3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glNormal3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3d, doc_QOpenGLFunctions_2_1_glNormal3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3bv, "QOpenGLFunctions_2_1.glNormal3bv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3bv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3bv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1987 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormal3bv(reinterpret_cast<const GLbyte *>(array));
#line 12407 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3bv, doc_QOpenGLFunctions_2_1_glNormal3bv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormal3b, "QOpenGLFunctions_2_1.glNormal3b(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormal3b(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormal3b(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbyte a0;
        GLbyte a1;
        GLbyte a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BLLL", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glNormal3b(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormal3b, doc_QOpenGLFunctions_2_1_glNormal3b);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexsv, "QOpenGLFunctions_2_1.glIndexsv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexsv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexsv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 1996 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexsv(reinterpret_cast<const GLshort *>(array));
#line 12478 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexsv, doc_QOpenGLFunctions_2_1_glIndexsv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexs, "QOpenGLFunctions_2_1.glIndexs(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexs(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexs(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexs, doc_QOpenGLFunctions_2_1_glIndexs);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexiv, "QOpenGLFunctions_2_1.glIndexiv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2005 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexiv(reinterpret_cast<const GLint *>(array));
#line 12547 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexiv, doc_QOpenGLFunctions_2_1_glIndexiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexi, "QOpenGLFunctions_2_1.glIndexi(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexi(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexi(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexi, doc_QOpenGLFunctions_2_1_glIndexi);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexfv, "QOpenGLFunctions_2_1.glIndexfv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2014 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexfv(reinterpret_cast<const GLfloat *>(array));
#line 12616 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexfv, doc_QOpenGLFunctions_2_1_glIndexfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexf, "QOpenGLFunctions_2_1.glIndexf(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexf(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexf, doc_QOpenGLFunctions_2_1_glIndexf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexdv, "QOpenGLFunctions_2_1.glIndexdv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexdv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexdv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2023 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexdv(reinterpret_cast<const GLdouble *>(array));
#line 12685 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexdv, doc_QOpenGLFunctions_2_1_glIndexdv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexd, "QOpenGLFunctions_2_1.glIndexd(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glIndexd(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexd, doc_QOpenGLFunctions_2_1_glIndexd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEnd, "QOpenGLFunctions_2_1.glEnd()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEnd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glEnd();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEnd, doc_QOpenGLFunctions_2_1_glEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEdgeFlagv, "QOpenGLFunctions_2_1.glEdgeFlagv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlagv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlagv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2033 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glEdgeFlagv(reinterpret_cast<const GLboolean *>(array));
#line 12781 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEdgeFlagv, doc_QOpenGLFunctions_2_1_glEdgeFlagv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEdgeFlag, "QOpenGLFunctions_2_1.glEdgeFlag(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlag(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLboolean a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEdgeFlag(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEdgeFlag, doc_QOpenGLFunctions_2_1_glEdgeFlag);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4usv, "QOpenGLFunctions_2_1.glColor4usv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4usv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4usv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2043 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4usv(reinterpret_cast<const GLushort *>(array));
#line 12851 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4usv, doc_QOpenGLFunctions_2_1_glColor4usv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4us, "QOpenGLFunctions_2_1.glColor4us(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4us(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4us(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLushort a0;
        GLushort a1;
        GLushort a2;
        GLushort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Btttt", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4us(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4us, doc_QOpenGLFunctions_2_1_glColor4us);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4uiv, "QOpenGLFunctions_2_1.glColor4uiv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4uiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4uiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2053 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4uiv(reinterpret_cast<const GLuint *>(array));
#line 12924 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4uiv, doc_QOpenGLFunctions_2_1_glColor4uiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4ui, "QOpenGLFunctions_2_1.glColor4ui(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4ui(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4ui(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        GLuint a2;
        GLuint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4ui(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4ui, doc_QOpenGLFunctions_2_1_glColor4ui);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4ubv, "QOpenGLFunctions_2_1.glColor4ubv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4ubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4ubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2063 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4ubv(reinterpret_cast<const GLubyte *>(array));
#line 12997 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4ubv, doc_QOpenGLFunctions_2_1_glColor4ubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4ub, "QOpenGLFunctions_2_1.glColor4ub(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4ub(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4ub(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLubyte a0;
        GLubyte a1;
        GLubyte a2;
        GLubyte a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BMMMM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4ub(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4ub, doc_QOpenGLFunctions_2_1_glColor4ub);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4sv, "QOpenGLFunctions_2_1.glColor4sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2073 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4sv(reinterpret_cast<const GLshort *>(array));
#line 13069 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4sv, doc_QOpenGLFunctions_2_1_glColor4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4s, "QOpenGLFunctions_2_1.glColor4s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4s, doc_QOpenGLFunctions_2_1_glColor4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4iv, "QOpenGLFunctions_2_1.glColor4iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2082 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4iv(reinterpret_cast<const GLint *>(array));
#line 13141 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4iv, doc_QOpenGLFunctions_2_1_glColor4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4i, "QOpenGLFunctions_2_1.glColor4i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4i, doc_QOpenGLFunctions_2_1_glColor4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4fv, "QOpenGLFunctions_2_1.glColor4fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2091 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4fv(reinterpret_cast<const GLfloat *>(array));
#line 13213 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4fv, doc_QOpenGLFunctions_2_1_glColor4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4f, "QOpenGLFunctions_2_1.glColor4f(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4f, doc_QOpenGLFunctions_2_1_glColor4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4dv, "QOpenGLFunctions_2_1.glColor4dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2100 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4dv(reinterpret_cast<const GLdouble *>(array));
#line 13285 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4dv, doc_QOpenGLFunctions_2_1_glColor4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4d, "QOpenGLFunctions_2_1.glColor4d(float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4d, doc_QOpenGLFunctions_2_1_glColor4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4bv, "QOpenGLFunctions_2_1.glColor4bv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4bv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4bv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2109 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor4bv(reinterpret_cast<const GLbyte *>(array));
#line 13357 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4bv, doc_QOpenGLFunctions_2_1_glColor4bv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor4b, "QOpenGLFunctions_2_1.glColor4b(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor4b(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor4b(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbyte a0;
        GLbyte a1;
        GLbyte a2;
        GLbyte a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BLLLL", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glColor4b(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor4b, doc_QOpenGLFunctions_2_1_glColor4b);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3usv, "QOpenGLFunctions_2_1.glColor3usv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3usv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3usv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2118 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3usv(reinterpret_cast<const GLushort *>(array));
#line 13430 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3usv, doc_QOpenGLFunctions_2_1_glColor3usv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3us, "QOpenGLFunctions_2_1.glColor3us(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3us(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3us(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLushort a0;
        GLushort a1;
        GLushort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bttt", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3us(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3us, doc_QOpenGLFunctions_2_1_glColor3us);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3uiv, "QOpenGLFunctions_2_1.glColor3uiv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3uiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3uiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2128 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3uiv(reinterpret_cast<const GLuint *>(array));
#line 13502 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3uiv, doc_QOpenGLFunctions_2_1_glColor3uiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3ui, "QOpenGLFunctions_2_1.glColor3ui(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3ui(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3ui(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        GLuint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3ui(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3ui, doc_QOpenGLFunctions_2_1_glColor3ui);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3ubv, "QOpenGLFunctions_2_1.glColor3ubv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3ubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3ubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2138 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3ubv(reinterpret_cast<const GLubyte *>(array));
#line 13574 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3ubv, doc_QOpenGLFunctions_2_1_glColor3ubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3ub, "QOpenGLFunctions_2_1.glColor3ub(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3ub(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3ub(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLubyte a0;
        GLubyte a1;
        GLubyte a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BMMM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3ub(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3ub, doc_QOpenGLFunctions_2_1_glColor3ub);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3sv, "QOpenGLFunctions_2_1.glColor3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2148 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3sv(reinterpret_cast<const GLshort *>(array));
#line 13645 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3sv, doc_QOpenGLFunctions_2_1_glColor3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3s, "QOpenGLFunctions_2_1.glColor3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3s, doc_QOpenGLFunctions_2_1_glColor3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3iv, "QOpenGLFunctions_2_1.glColor3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2157 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3iv(reinterpret_cast<const GLint *>(array));
#line 13716 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3iv, doc_QOpenGLFunctions_2_1_glColor3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3i, "QOpenGLFunctions_2_1.glColor3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3i, doc_QOpenGLFunctions_2_1_glColor3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3fv, "QOpenGLFunctions_2_1.glColor3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2166 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3fv(reinterpret_cast<const GLfloat *>(array));
#line 13787 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3fv, doc_QOpenGLFunctions_2_1_glColor3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3f, "QOpenGLFunctions_2_1.glColor3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3f, doc_QOpenGLFunctions_2_1_glColor3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3dv, "QOpenGLFunctions_2_1.glColor3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2175 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3dv(reinterpret_cast<const GLdouble *>(array));
#line 13858 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3dv, doc_QOpenGLFunctions_2_1_glColor3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3d, "QOpenGLFunctions_2_1.glColor3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3d, doc_QOpenGLFunctions_2_1_glColor3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3bv, "QOpenGLFunctions_2_1.glColor3bv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3bv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3bv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2184 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColor3bv(reinterpret_cast<const GLbyte *>(array));
#line 13929 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3bv, doc_QOpenGLFunctions_2_1_glColor3bv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColor3b, "QOpenGLFunctions_2_1.glColor3b(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColor3b(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColor3b(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbyte a0;
        GLbyte a1;
        GLbyte a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BLLL", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glColor3b(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColor3b, doc_QOpenGLFunctions_2_1_glColor3b);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBitmap, "QOpenGLFunctions_2_1.glBitmap(int, int, float, float, float, float, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBitmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        GLsizei a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        GLfloat a5;
        PyObject * a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiffffP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipErrorState sipError = sipErrorNone;

#line 2193 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a6, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glBitmap(a0, a1, a2, a3, a4, a5,
                    reinterpret_cast<const GLubyte *>(array));
#line 14008 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBitmap, doc_QOpenGLFunctions_2_1_glBitmap);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glBegin, "QOpenGLFunctions_2_1.glBegin(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glBegin(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glBegin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glBegin, doc_QOpenGLFunctions_2_1_glBegin);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glListBase, "QOpenGLFunctions_2_1.glListBase(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glListBase(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glListBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glListBase(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glListBase, doc_QOpenGLFunctions_2_1_glListBase);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGenLists, "QOpenGLFunctions_2_1.glGenLists(int) -> int");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGenLists(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGenLists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            GLuint sipRes;

            sipRes = sipCpp->glGenLists(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGenLists, doc_QOpenGLFunctions_2_1_glGenLists);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDeleteLists, "QOpenGLFunctions_2_1.glDeleteLists(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDeleteLists(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDeleteLists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLsizei a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glDeleteLists(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDeleteLists, doc_QOpenGLFunctions_2_1_glDeleteLists);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCallList, "QOpenGLFunctions_2_1.glCallList(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCallList(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCallList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glCallList(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCallList, doc_QOpenGLFunctions_2_1_glCallList);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEndList, "QOpenGLFunctions_2_1.glEndList()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEndList(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEndList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glEndList();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEndList, doc_QOpenGLFunctions_2_1_glEndList);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNewList, "QOpenGLFunctions_2_1.glNewList(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNewList(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNewList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLenum a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glNewList(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNewList, doc_QOpenGLFunctions_2_1_glNewList);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPushClientAttrib, "QOpenGLFunctions_2_1.glPushClientAttrib(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPushClientAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPushClientAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbitfield a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glPushClientAttrib(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPushClientAttrib, doc_QOpenGLFunctions_2_1_glPushClientAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glPopClientAttrib, "QOpenGLFunctions_2_1.glPopClientAttrib()");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glPopClientAttrib(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glPopClientAttrib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp))
        {
            sipCpp->glPopClientAttrib();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glPopClientAttrib, doc_QOpenGLFunctions_2_1_glPopClientAttrib);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexPointer, "QOpenGLFunctions_2_1.glVertexPointer(int, int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLenum a1;
        GLsizei a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 2212 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a3, a1, sipSelf,
                "VertexPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexPointer(a0, a1, a2, array);
#line 14298 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexPointer, doc_QOpenGLFunctions_2_1_glVertexPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glTexCoordPointer, "QOpenGLFunctions_2_1.glTexCoordPointer(int, int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glTexCoordPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glTexCoordPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLenum a1;
        GLsizei a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 2221 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a3, a1, sipSelf,
                "TexCoordPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glTexCoordPointer(a0, a1, a2, array);
#line 14344 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glTexCoordPointer, doc_QOpenGLFunctions_2_1_glTexCoordPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glNormalPointer, "QOpenGLFunctions_2_1.glNormalPointer(int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glNormalPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glNormalPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2230 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a2, a0, sipSelf,
                "NormalPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glNormalPointer(a0, a1, array);
#line 14389 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glNormalPointer, doc_QOpenGLFunctions_2_1_glNormalPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glIndexPointer, "QOpenGLFunctions_2_1.glIndexPointer(int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glIndexPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glIndexPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2239 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a2, a0, sipSelf,
                "IndexPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glIndexPointer(a0, a1, array);
#line 14434 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glIndexPointer, doc_QOpenGLFunctions_2_1_glIndexPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEnableClientState, "QOpenGLFunctions_2_1.glEnableClientState(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEnableClientState(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEnableClientState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glEnableClientState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEnableClientState, doc_QOpenGLFunctions_2_1_glEnableClientState);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glEdgeFlagPointer, "QOpenGLFunctions_2_1.glEdgeFlagPointer(int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlagPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glEdgeFlagPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLsizei a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2249 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a1,
                GL_UNSIGNED_BYTE, sipSelf, "EdgeFlagPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glEdgeFlagPointer(a0, array);
#line 14505 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glEdgeFlagPointer, doc_QOpenGLFunctions_2_1_glEdgeFlagPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glDisableClientState, "QOpenGLFunctions_2_1.glDisableClientState(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glDisableClientState(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glDisableClientState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glDisableClientState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glDisableClientState, doc_QOpenGLFunctions_2_1_glDisableClientState);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorPointer, "QOpenGLFunctions_2_1.glColorPointer(int, int, int, sequence-or-buffer-or-offset)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLenum a1;
        GLsizei a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 2259 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array_cached(&sipError, a3, a1, sipSelf,
                "ColorPointer", 0);
        
        if (sipError == sipErrorNone)
            sipCpp->glColorPointer(a0, a1, a2, array);
#line 14578 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorPointer, doc_QOpenGLFunctions_2_1_glColorPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glArrayElement, "QOpenGLFunctions_2_1.glArrayElement(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glArrayElement(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glArrayElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glArrayElement(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glArrayElement, doc_QOpenGLFunctions_2_1_glArrayElement);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glResetMinmax, "QOpenGLFunctions_2_1.glResetMinmax(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glResetMinmax(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glResetMinmax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glResetMinmax(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glResetMinmax, doc_QOpenGLFunctions_2_1_glResetMinmax);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glResetHistogram, "QOpenGLFunctions_2_1.glResetHistogram(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glResetHistogram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glResetHistogram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glResetHistogram(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glResetHistogram, doc_QOpenGLFunctions_2_1_glResetHistogram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMinmax, "QOpenGLFunctions_2_1.glMinmax(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMinmax(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMinmax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLboolean a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMinmax(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMinmax, doc_QOpenGLFunctions_2_1_glMinmax);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glHistogram, "QOpenGLFunctions_2_1.glHistogram(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glHistogram(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glHistogram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        GLenum a2;
        GLboolean a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiuM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glHistogram(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glHistogram, doc_QOpenGLFunctions_2_1_glHistogram);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetConvolutionParameteriv, "QOpenGLFunctions_2_1.glGetConvolutionParameteriv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetConvolutionParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetConvolutionParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 2273 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CONVOLUTION_BORDER_COLOR:
        case GL_CONVOLUTION_FILTER_SCALE:
        case GL_CONVOLUTION_FILTER_BIAS:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetConvolutionParameteriv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 14776 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetConvolutionParameteriv, doc_QOpenGLFunctions_2_1_glGetConvolutionParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetConvolutionParameterfv, "QOpenGLFunctions_2_1.glGetConvolutionParameterfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetConvolutionParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetConvolutionParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 2295 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_CONVOLUTION_BORDER_COLOR:
        case GL_CONVOLUTION_FILTER_SCALE:
        case GL_CONVOLUTION_FILTER_BIAS:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetConvolutionParameterfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 14828 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetConvolutionParameterfv, doc_QOpenGLFunctions_2_1_glGetConvolutionParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D, "QOpenGLFunctions_2_1.glCopyConvolutionFilter2D(int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        GLsizei a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->glCopyConvolutionFilter2D(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyConvolutionFilter2D, doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D, "QOpenGLFunctions_2_1.glCopyConvolutionFilter1D(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glCopyConvolutionFilter1D(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyConvolutionFilter1D, doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionParameteriv, "QOpenGLFunctions_2_1.glConvolutionParameteriv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2319 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glConvolutionParameteriv(a0, a1,
                    reinterpret_cast<const GLint *>(array));
#line 14930 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionParameteriv, doc_QOpenGLFunctions_2_1_glConvolutionParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionParameteri, "QOpenGLFunctions_2_1.glConvolutionParameteri(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameteri(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameteri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glConvolutionParameteri(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionParameteri, doc_QOpenGLFunctions_2_1_glConvolutionParameteri);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionParameterfv, "QOpenGLFunctions_2_1.glConvolutionParameterfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2329 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glConvolutionParameterfv(a0, a1,
                    reinterpret_cast<const GLfloat *>(array));
#line 15004 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionParameterfv, doc_QOpenGLFunctions_2_1_glConvolutionParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionParameterf, "QOpenGLFunctions_2_1.glConvolutionParameterf(int, int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameterf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionParameterf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glConvolutionParameterf(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionParameterf, doc_QOpenGLFunctions_2_1_glConvolutionParameterf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionFilter2D, "QOpenGLFunctions_2_1.glConvolutionFilter2D(int, int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionFilter2D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionFilter2D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLsizei a2;
        GLsizei a3;
        GLenum a4;
        GLenum a5;
        PyObject * a6;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
        {
            sipErrorState sipError = sipErrorNone;

#line 2339 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a6, a5, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glConvolutionFilter2D(a0, a1, a2, a3, a4, a5, array);
#line 15081 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionFilter2D, doc_QOpenGLFunctions_2_1_glConvolutionFilter2D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glConvolutionFilter1D, "QOpenGLFunctions_2_1.glConvolutionFilter1D(int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionFilter1D(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glConvolutionFilter1D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLsizei a2;
        GLenum a3;
        GLenum a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 2347 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, a4, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glConvolutionFilter1D(a0, a1, a2, a3, a4, array);
#line 15128 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glConvolutionFilter1D, doc_QOpenGLFunctions_2_1_glConvolutionFilter1D);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyColorSubTable, "QOpenGLFunctions_2_1.glCopyColorSubTable(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyColorSubTable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyColorSubTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glCopyColorSubTable(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyColorSubTable, doc_QOpenGLFunctions_2_1_glCopyColorSubTable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorSubTable, "QOpenGLFunctions_2_1.glColorSubTable(int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorSubTable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorSubTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        GLsizei a2;
        GLenum a3;
        GLenum a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 2356 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, a4, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColorSubTable(a0, a1, a2, a3, a4, array);
#line 15206 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorSubTable, doc_QOpenGLFunctions_2_1_glColorSubTable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetColorTableParameteriv, "QOpenGLFunctions_2_1.glGetColorTableParameteriv(int, int) -> int-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetColorTableParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetColorTableParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 2364 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLint params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_COLOR_TABLE:
        case GL_POST_CONVOLUTION_COLOR_TABLE:
        case GL_POST_COLOR_MATRIX_COLOR_TABLE:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetColorTableParameteriv(a0, a1, params);
        
        a2 = qpyopengl_from_GLint(&sipIsErr, params, nr_params);
#line 15264 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetColorTableParameteriv, doc_QOpenGLFunctions_2_1_glGetColorTableParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glGetColorTableParameterfv, "QOpenGLFunctions_2_1.glGetColorTableParameterfv(int, int) -> float-or-tuple");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glGetColorTableParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glGetColorTableParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            int sipIsErr = 0;

#line 2386 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        GLfloat params[4];
        SIP_SSIZE_T nr_params;
        
        switch (a1)
        {
        case GL_COLOR_TABLE:
        case GL_POST_CONVOLUTION_COLOR_TABLE:
        case GL_POST_COLOR_MATRIX_COLOR_TABLE:
            nr_params = 4;
            break;
        
        default:
            nr_params = 1;
        }
        
        sipCpp->glGetColorTableParameterfv(a0, a1, params);
        
        a2 = qpyopengl_from_GLfloat(&sipIsErr, params, nr_params);
#line 15316 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipIsErr)
                return 0;

            return a2;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glGetColorTableParameterfv, doc_QOpenGLFunctions_2_1_glGetColorTableParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glCopyColorTable, "QOpenGLFunctions_2_1.glCopyColorTable(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glCopyColorTable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glCopyColorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLint a2;
        GLint a3;
        GLsizei a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glCopyColorTable(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glCopyColorTable, doc_QOpenGLFunctions_2_1_glCopyColorTable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorTableParameteriv, "QOpenGLFunctions_2_1.glColorTableParameteriv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorTableParameteriv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorTableParameteriv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2409 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColorTableParameteriv(a0, a1,
                    reinterpret_cast<const GLint *>(array));
#line 15386 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorTableParameteriv, doc_QOpenGLFunctions_2_1_glColorTableParameteriv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorTableParameterfv, "QOpenGLFunctions_2_1.glColorTableParameterfv(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorTableParameterfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorTableParameterfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2418 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColorTableParameterfv(a0, a1,
                    reinterpret_cast<const GLfloat *>(array));
#line 15431 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorTableParameterfv, doc_QOpenGLFunctions_2_1_glColorTableParameterfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glColorTable, "QOpenGLFunctions_2_1.glColorTable(int, int, int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glColorTable(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glColorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLenum a1;
        GLsizei a2;
        GLenum a3;
        GLenum a4;
        PyObject * a5;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuuiuuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipErrorState sipError = sipErrorNone;

#line 2427 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a5, a4, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glColorTable(a0, a1, a2, a3, a4, array);
#line 15478 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glColorTable, doc_QOpenGLFunctions_2_1_glColorTable);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultTransposeMatrixd, "QOpenGLFunctions_2_1.glMultTransposeMatrixd(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultTransposeMatrixd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultTransposeMatrixd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2435 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultTransposeMatrixd(reinterpret_cast<const GLdouble *>(array));
#line 15520 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultTransposeMatrixd, doc_QOpenGLFunctions_2_1_glMultTransposeMatrixd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultTransposeMatrixf, "QOpenGLFunctions_2_1.glMultTransposeMatrixf(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultTransposeMatrixf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultTransposeMatrixf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2443 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultTransposeMatrixf(reinterpret_cast<const GLfloat *>(array));
#line 15562 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultTransposeMatrixf, doc_QOpenGLFunctions_2_1_glMultTransposeMatrixf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixd, "QOpenGLFunctions_2_1.glLoadTransposeMatrixd(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2451 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLoadTransposeMatrixd(reinterpret_cast<const GLdouble *>(array));
#line 15604 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadTransposeMatrixd, doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixf, "QOpenGLFunctions_2_1.glLoadTransposeMatrixf(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2459 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glLoadTransposeMatrixf(reinterpret_cast<const GLfloat *>(array));
#line 15646 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glLoadTransposeMatrixf, doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4sv, "QOpenGLFunctions_2_1.glMultiTexCoord4sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2467 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord4sv(a0, reinterpret_cast<const GLshort *>(array));
#line 15689 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4sv, doc_QOpenGLFunctions_2_1_glMultiTexCoord4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4s, "QOpenGLFunctions_2_1.glMultiTexCoord4s(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        GLshort a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glMultiTexCoord4s(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4s, doc_QOpenGLFunctions_2_1_glMultiTexCoord4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4iv, "QOpenGLFunctions_2_1.glMultiTexCoord4iv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2476 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord4iv(a0, reinterpret_cast<const GLint *>(array));
#line 15763 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4iv, doc_QOpenGLFunctions_2_1_glMultiTexCoord4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4i, "QOpenGLFunctions_2_1.glMultiTexCoord4i(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        GLint a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glMultiTexCoord4i(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4i, doc_QOpenGLFunctions_2_1_glMultiTexCoord4i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4fv, "QOpenGLFunctions_2_1.glMultiTexCoord4fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2485 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord4fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 15837 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4fv, doc_QOpenGLFunctions_2_1_glMultiTexCoord4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4f, "QOpenGLFunctions_2_1.glMultiTexCoord4f(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glMultiTexCoord4f(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4f, doc_QOpenGLFunctions_2_1_glMultiTexCoord4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4dv, "QOpenGLFunctions_2_1.glMultiTexCoord4dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2494 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord4dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 15911 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4dv, doc_QOpenGLFunctions_2_1_glMultiTexCoord4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord4d, "QOpenGLFunctions_2_1.glMultiTexCoord4d(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        GLdouble a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Budddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glMultiTexCoord4d(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord4d, doc_QOpenGLFunctions_2_1_glMultiTexCoord4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3sv, "QOpenGLFunctions_2_1.glMultiTexCoord3sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2503 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord3sv(a0, reinterpret_cast<const GLshort *>(array));
#line 15985 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3sv, doc_QOpenGLFunctions_2_1_glMultiTexCoord3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3s, "QOpenGLFunctions_2_1.glMultiTexCoord3s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glMultiTexCoord3s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3s, doc_QOpenGLFunctions_2_1_glMultiTexCoord3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3iv, "QOpenGLFunctions_2_1.glMultiTexCoord3iv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2512 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord3iv(a0, reinterpret_cast<const GLint *>(array));
#line 16058 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3iv, doc_QOpenGLFunctions_2_1_glMultiTexCoord3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3i, "QOpenGLFunctions_2_1.glMultiTexCoord3i(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        GLint a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buiii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glMultiTexCoord3i(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3i, doc_QOpenGLFunctions_2_1_glMultiTexCoord3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3fv, "QOpenGLFunctions_2_1.glMultiTexCoord3fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2521 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord3fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 16131 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3fv, doc_QOpenGLFunctions_2_1_glMultiTexCoord3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3f, "QOpenGLFunctions_2_1.glMultiTexCoord3f(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bufff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glMultiTexCoord3f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3f, doc_QOpenGLFunctions_2_1_glMultiTexCoord3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3dv, "QOpenGLFunctions_2_1.glMultiTexCoord3dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2530 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord3dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 16204 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3dv, doc_QOpenGLFunctions_2_1_glMultiTexCoord3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord3d, "QOpenGLFunctions_2_1.glMultiTexCoord3d(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glMultiTexCoord3d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord3d, doc_QOpenGLFunctions_2_1_glMultiTexCoord3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2sv, "QOpenGLFunctions_2_1.glMultiTexCoord2sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2539 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord2sv(a0, reinterpret_cast<const GLshort *>(array));
#line 16277 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2sv, doc_QOpenGLFunctions_2_1_glMultiTexCoord2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2s, "QOpenGLFunctions_2_1.glMultiTexCoord2s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMultiTexCoord2s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2s, doc_QOpenGLFunctions_2_1_glMultiTexCoord2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2iv, "QOpenGLFunctions_2_1.glMultiTexCoord2iv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2548 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord2iv(a0, reinterpret_cast<const GLint *>(array));
#line 16349 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2iv, doc_QOpenGLFunctions_2_1_glMultiTexCoord2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2i, "QOpenGLFunctions_2_1.glMultiTexCoord2i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMultiTexCoord2i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2i, doc_QOpenGLFunctions_2_1_glMultiTexCoord2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2fv, "QOpenGLFunctions_2_1.glMultiTexCoord2fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2557 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord2fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 16421 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2fv, doc_QOpenGLFunctions_2_1_glMultiTexCoord2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2f, "QOpenGLFunctions_2_1.glMultiTexCoord2f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMultiTexCoord2f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2f, doc_QOpenGLFunctions_2_1_glMultiTexCoord2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2dv, "QOpenGLFunctions_2_1.glMultiTexCoord2dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2566 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord2dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 16493 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2dv, doc_QOpenGLFunctions_2_1_glMultiTexCoord2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord2d, "QOpenGLFunctions_2_1.glMultiTexCoord2d(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Budd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glMultiTexCoord2d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord2d, doc_QOpenGLFunctions_2_1_glMultiTexCoord2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1sv, "QOpenGLFunctions_2_1.glMultiTexCoord1sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2575 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord1sv(a0, reinterpret_cast<const GLshort *>(array));
#line 16565 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1sv, doc_QOpenGLFunctions_2_1_glMultiTexCoord1sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1s, "QOpenGLFunctions_2_1.glMultiTexCoord1s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glMultiTexCoord1s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1s, doc_QOpenGLFunctions_2_1_glMultiTexCoord1s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1iv, "QOpenGLFunctions_2_1.glMultiTexCoord1iv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2584 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord1iv(a0, reinterpret_cast<const GLint *>(array));
#line 16636 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1iv, doc_QOpenGLFunctions_2_1_glMultiTexCoord1iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1i, "QOpenGLFunctions_2_1.glMultiTexCoord1i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bui", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glMultiTexCoord1i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1i, doc_QOpenGLFunctions_2_1_glMultiTexCoord1i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1fv, "QOpenGLFunctions_2_1.glMultiTexCoord1fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2593 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord1fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 16707 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1fv, doc_QOpenGLFunctions_2_1_glMultiTexCoord1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1f, "QOpenGLFunctions_2_1.glMultiTexCoord1f(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glMultiTexCoord1f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1f, doc_QOpenGLFunctions_2_1_glMultiTexCoord1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1dv, "QOpenGLFunctions_2_1.glMultiTexCoord1dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2602 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glMultiTexCoord1dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 16778 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1dv, doc_QOpenGLFunctions_2_1_glMultiTexCoord1dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glMultiTexCoord1d, "QOpenGLFunctions_2_1.glMultiTexCoord1d(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glMultiTexCoord1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bud", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glMultiTexCoord1d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glMultiTexCoord1d, doc_QOpenGLFunctions_2_1_glMultiTexCoord1d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glClientActiveTexture, "QOpenGLFunctions_2_1.glClientActiveTexture(int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glClientActiveTexture(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glClientActiveTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glClientActiveTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glClientActiveTexture, doc_QOpenGLFunctions_2_1_glClientActiveTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3sv, "QOpenGLFunctions_2_1.glWindowPos3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2612 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos3sv(reinterpret_cast<const GLshort *>(array));
#line 16875 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3sv, doc_QOpenGLFunctions_2_1_glWindowPos3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3s, "QOpenGLFunctions_2_1.glWindowPos3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glWindowPos3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3s, doc_QOpenGLFunctions_2_1_glWindowPos3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3iv, "QOpenGLFunctions_2_1.glWindowPos3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2621 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos3iv(reinterpret_cast<const GLint *>(array));
#line 16946 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3iv, doc_QOpenGLFunctions_2_1_glWindowPos3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3i, "QOpenGLFunctions_2_1.glWindowPos3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glWindowPos3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3i, doc_QOpenGLFunctions_2_1_glWindowPos3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3fv, "QOpenGLFunctions_2_1.glWindowPos3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2630 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos3fv(reinterpret_cast<const GLfloat *>(array));
#line 17017 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3fv, doc_QOpenGLFunctions_2_1_glWindowPos3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3f, "QOpenGLFunctions_2_1.glWindowPos3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glWindowPos3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3f, doc_QOpenGLFunctions_2_1_glWindowPos3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3dv, "QOpenGLFunctions_2_1.glWindowPos3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2639 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos3dv(reinterpret_cast<const GLdouble *>(array));
#line 17088 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3dv, doc_QOpenGLFunctions_2_1_glWindowPos3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos3d, "QOpenGLFunctions_2_1.glWindowPos3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glWindowPos3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos3d, doc_QOpenGLFunctions_2_1_glWindowPos3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2sv, "QOpenGLFunctions_2_1.glWindowPos2sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2648 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos2sv(reinterpret_cast<const GLshort *>(array));
#line 17159 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2sv, doc_QOpenGLFunctions_2_1_glWindowPos2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2s, "QOpenGLFunctions_2_1.glWindowPos2s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glWindowPos2s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2s, doc_QOpenGLFunctions_2_1_glWindowPos2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2iv, "QOpenGLFunctions_2_1.glWindowPos2iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2657 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos2iv(reinterpret_cast<const GLint *>(array));
#line 17229 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2iv, doc_QOpenGLFunctions_2_1_glWindowPos2iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2i, "QOpenGLFunctions_2_1.glWindowPos2i(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glWindowPos2i(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2i, doc_QOpenGLFunctions_2_1_glWindowPos2i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2fv, "QOpenGLFunctions_2_1.glWindowPos2fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2666 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos2fv(reinterpret_cast<const GLfloat *>(array));
#line 17299 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2fv, doc_QOpenGLFunctions_2_1_glWindowPos2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2f, "QOpenGLFunctions_2_1.glWindowPos2f(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glWindowPos2f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2f, doc_QOpenGLFunctions_2_1_glWindowPos2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2dv, "QOpenGLFunctions_2_1.glWindowPos2dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2675 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glWindowPos2dv(reinterpret_cast<const GLdouble *>(array));
#line 17369 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2dv, doc_QOpenGLFunctions_2_1_glWindowPos2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glWindowPos2d, "QOpenGLFunctions_2_1.glWindowPos2d(float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glWindowPos2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glWindowPos2d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glWindowPos2d, doc_QOpenGLFunctions_2_1_glWindowPos2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColorPointer, "QOpenGLFunctions_2_1.glSecondaryColorPointer(int, int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColorPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColorPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLenum a1;
        GLsizei a2;
        PyObject * a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipErrorState sipError = sipErrorNone;

#line 2684 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a3, a1, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColorPointer(a0, a1, a2, array);
#line 17442 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColorPointer, doc_QOpenGLFunctions_2_1_glSecondaryColorPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3usv, "QOpenGLFunctions_2_1.glSecondaryColor3usv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3usv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3usv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2692 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3usv(reinterpret_cast<const GLushort *>(array));
#line 17485 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3usv, doc_QOpenGLFunctions_2_1_glSecondaryColor3usv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3us, "QOpenGLFunctions_2_1.glSecondaryColor3us(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3us(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3us(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLushort a0;
        GLushort a1;
        GLushort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bttt", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3us(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3us, doc_QOpenGLFunctions_2_1_glSecondaryColor3us);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3uiv, "QOpenGLFunctions_2_1.glSecondaryColor3uiv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3uiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3uiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2702 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3uiv(reinterpret_cast<const GLuint *>(array));
#line 17557 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3uiv, doc_QOpenGLFunctions_2_1_glSecondaryColor3uiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3ui, "QOpenGLFunctions_2_1.glSecondaryColor3ui(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ui(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ui(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLuint a1;
        GLuint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buuu", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3ui(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3ui, doc_QOpenGLFunctions_2_1_glSecondaryColor3ui);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3ubv, "QOpenGLFunctions_2_1.glSecondaryColor3ubv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2712 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3ubv(reinterpret_cast<const GLubyte *>(array));
#line 17629 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3ubv, doc_QOpenGLFunctions_2_1_glSecondaryColor3ubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3ub, "QOpenGLFunctions_2_1.glSecondaryColor3ub(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ub(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3ub(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLubyte a0;
        GLubyte a1;
        GLubyte a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BMMM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3ub(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3ub, doc_QOpenGLFunctions_2_1_glSecondaryColor3ub);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3sv, "QOpenGLFunctions_2_1.glSecondaryColor3sv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B!", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2722 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3sv(reinterpret_cast<const GLshort *>(array));
#line 17700 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3sv, doc_QOpenGLFunctions_2_1_glSecondaryColor3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3s, "QOpenGLFunctions_2_1.glSecondaryColor3s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLshort a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3s, doc_QOpenGLFunctions_2_1_glSecondaryColor3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3iv, "QOpenGLFunctions_2_1.glSecondaryColor3iv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2731 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3iv(reinterpret_cast<const GLint *>(array));
#line 17771 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3iv, doc_QOpenGLFunctions_2_1_glSecondaryColor3iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3i, "QOpenGLFunctions_2_1.glSecondaryColor3i(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3i(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3i(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLint a0;
        GLint a1;
        GLint a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3i(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3i, doc_QOpenGLFunctions_2_1_glSecondaryColor3i);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3fv, "QOpenGLFunctions_2_1.glSecondaryColor3fv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2740 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3fv(reinterpret_cast<const GLfloat *>(array));
#line 17842 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3fv, doc_QOpenGLFunctions_2_1_glSecondaryColor3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3f, "QOpenGLFunctions_2_1.glSecondaryColor3f(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3f, doc_QOpenGLFunctions_2_1_glSecondaryColor3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3dv, "QOpenGLFunctions_2_1.glSecondaryColor3dv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2749 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3dv(reinterpret_cast<const GLdouble *>(array));
#line 17913 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3dv, doc_QOpenGLFunctions_2_1_glSecondaryColor3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3d, "QOpenGLFunctions_2_1.glSecondaryColor3d(float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3d, doc_QOpenGLFunctions_2_1_glSecondaryColor3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3bv, "QOpenGLFunctions_2_1.glSecondaryColor3bv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3bv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3bv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2758 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glSecondaryColor3bv(reinterpret_cast<const GLbyte *>(array));
#line 17984 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3bv, doc_QOpenGLFunctions_2_1_glSecondaryColor3bv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glSecondaryColor3b, "QOpenGLFunctions_2_1.glSecondaryColor3b(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3b(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glSecondaryColor3b(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLbyte a0;
        GLbyte a1;
        GLbyte a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BLLL", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glSecondaryColor3b(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glSecondaryColor3b, doc_QOpenGLFunctions_2_1_glSecondaryColor3b);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogCoordPointer, "QOpenGLFunctions_2_1.glFogCoordPointer(int, int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordPointer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        GLsizei a1;
        PyObject * a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuiP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 2767 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a2, a0, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glFogCoordPointer(a0, a1, array);
#line 18057 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogCoordPointer, doc_QOpenGLFunctions_2_1_glFogCoordPointer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogCoorddv, "QOpenGLFunctions_2_1.glFogCoorddv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogCoorddv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogCoorddv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2775 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glFogCoorddv(reinterpret_cast<const GLdouble *>(array));
#line 18099 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogCoorddv, doc_QOpenGLFunctions_2_1_glFogCoorddv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogCoordd, "QOpenGLFunctions_2_1.glFogCoordd(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordd(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLdouble a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glFogCoordd(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogCoordd, doc_QOpenGLFunctions_2_1_glFogCoordd);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogCoordfv, "QOpenGLFunctions_2_1.glFogCoordfv(sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordfv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordfv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 2784 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a0, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glFogCoordfv(reinterpret_cast<const GLfloat *>(array));
#line 18168 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogCoordfv, doc_QOpenGLFunctions_2_1_glFogCoordfv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glFogCoordf, "QOpenGLFunctions_2_1.glFogCoordf(float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordf(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glFogCoordf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLfloat a0;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0))
        {
            sipCpp->glFogCoordf(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glFogCoordf, doc_QOpenGLFunctions_2_1_glFogCoordf);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4usv, "QOpenGLFunctions_2_1.glVertexAttrib4usv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4usv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4usv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2793 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4usv(a0, reinterpret_cast<const GLushort *>(array));
#line 18239 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4usv, doc_QOpenGLFunctions_2_1_glVertexAttrib4usv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4uiv, "QOpenGLFunctions_2_1.glVertexAttrib4uiv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4uiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4uiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2802 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4uiv(a0, reinterpret_cast<const GLuint *>(array));
#line 18283 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4uiv, doc_QOpenGLFunctions_2_1_glVertexAttrib4uiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4ubv, "QOpenGLFunctions_2_1.glVertexAttrib4ubv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4ubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4ubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2811 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4ubv(a0, reinterpret_cast<const GLubyte *>(array));
#line 18327 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4ubv, doc_QOpenGLFunctions_2_1_glVertexAttrib4ubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4sv, "QOpenGLFunctions_2_1.glVertexAttrib4sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2820 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4sv(a0, reinterpret_cast<const GLshort *>(array));
#line 18370 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4sv, doc_QOpenGLFunctions_2_1_glVertexAttrib4sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4s, "QOpenGLFunctions_2_1.glVertexAttrib4s(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        GLshort a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glVertexAttrib4s(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4s, doc_QOpenGLFunctions_2_1_glVertexAttrib4s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4iv, "QOpenGLFunctions_2_1.glVertexAttrib4iv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4iv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4iv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2829 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4iv(a0, reinterpret_cast<const GLint *>(array));
#line 18444 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4iv, doc_QOpenGLFunctions_2_1_glVertexAttrib4iv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4fv, "QOpenGLFunctions_2_1.glVertexAttrib4fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2837 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 18487 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4fv, doc_QOpenGLFunctions_2_1_glVertexAttrib4fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4f, "QOpenGLFunctions_2_1.glVertexAttrib4f(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        GLfloat a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buffff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glVertexAttrib4f(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4f, doc_QOpenGLFunctions_2_1_glVertexAttrib4f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4dv, "QOpenGLFunctions_2_1.glVertexAttrib4dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2846 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 18561 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4dv, doc_QOpenGLFunctions_2_1_glVertexAttrib4dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4d, "QOpenGLFunctions_2_1.glVertexAttrib4d(int, float, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        GLdouble a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Budddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glVertexAttrib4d(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4d, doc_QOpenGLFunctions_2_1_glVertexAttrib4d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4bv, "QOpenGLFunctions_2_1.glVertexAttrib4bv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4bv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4bv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2855 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4bv(a0, reinterpret_cast<const GLbyte *>(array));
#line 18635 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4bv, doc_QOpenGLFunctions_2_1_glVertexAttrib4bv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nusv, "QOpenGLFunctions_2_1.glVertexAttrib4Nusv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nusv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nusv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2863 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_SHORT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Nusv(a0, reinterpret_cast<const GLushort *>(array));
#line 18679 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nusv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nusv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv, "QOpenGLFunctions_2_1.glVertexAttrib4Nuiv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2872 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_INT,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Nuiv(a0, reinterpret_cast<const GLuint *>(array));
#line 18723 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nuiv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nubv, "QOpenGLFunctions_2_1.glVertexAttrib4Nubv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nubv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nubv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2881 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_UNSIGNED_BYTE,
                sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Nubv(a0, reinterpret_cast<const GLubyte *>(array));
#line 18767 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nubv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nubv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nub, "QOpenGLFunctions_2_1.glVertexAttrib4Nub(int, int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nub(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nub(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLubyte a1;
        GLubyte a2;
        GLubyte a3;
        GLubyte a4;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuMMMM", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->glVertexAttrib4Nub(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nub, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nub);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nsv, "QOpenGLFunctions_2_1.glVertexAttrib4Nsv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nsv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nsv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2891 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Nsv(a0, reinterpret_cast<const GLshort *>(array));
#line 18841 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nsv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nsv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Niv, "QOpenGLFunctions_2_1.glVertexAttrib4Niv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Niv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Niv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2899 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_INT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Niv(a0, reinterpret_cast<const GLint *>(array));
#line 18884 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Niv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Niv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nbv, "QOpenGLFunctions_2_1.glVertexAttrib4Nbv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nbv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib4Nbv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2907 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_BYTE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib4Nbv(a0, reinterpret_cast<const GLbyte *>(array));
#line 18927 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib4Nbv, doc_QOpenGLFunctions_2_1_glVertexAttrib4Nbv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3sv, "QOpenGLFunctions_2_1.glVertexAttrib3sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2915 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib3sv(a0, reinterpret_cast<const GLshort *>(array));
#line 18970 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3sv, doc_QOpenGLFunctions_2_1_glVertexAttrib3sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3s, "QOpenGLFunctions_2_1.glVertexAttrib3s(int, int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLshort a1;
        GLshort a2;
        GLshort a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertexAttrib3s(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3s, doc_QOpenGLFunctions_2_1_glVertexAttrib3s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3fv, "QOpenGLFunctions_2_1.glVertexAttrib3fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2924 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib3fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 19043 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3fv, doc_QOpenGLFunctions_2_1_glVertexAttrib3fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3f, "QOpenGLFunctions_2_1.glVertexAttrib3f(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        GLfloat a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bufff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertexAttrib3f(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3f, doc_QOpenGLFunctions_2_1_glVertexAttrib3f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3dv, "QOpenGLFunctions_2_1.glVertexAttrib3dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2933 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib3dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 19116 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3dv, doc_QOpenGLFunctions_2_1_glVertexAttrib3dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib3d, "QOpenGLFunctions_2_1.glVertexAttrib3d(int, float, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib3d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLdouble a1;
        GLdouble a2;
        GLdouble a3;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buddd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->glVertexAttrib3d(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib3d, doc_QOpenGLFunctions_2_1_glVertexAttrib3d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2sv, "QOpenGLFunctions_2_1.glVertexAttrib2sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2942 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib2sv(a0, reinterpret_cast<const GLshort *>(array));
#line 19189 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2sv, doc_QOpenGLFunctions_2_1_glVertexAttrib2sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2s, "QOpenGLFunctions_2_1.glVertexAttrib2s(int, int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLshort a1;
        GLshort a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buhh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertexAttrib2s(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2s, doc_QOpenGLFunctions_2_1_glVertexAttrib2s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2fv, "QOpenGLFunctions_2_1.glVertexAttrib2fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2951 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib2fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 19261 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2fv, doc_QOpenGLFunctions_2_1_glVertexAttrib2fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2f, "QOpenGLFunctions_2_1.glVertexAttrib2f(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        GLfloat a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buff", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertexAttrib2f(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2f, doc_QOpenGLFunctions_2_1_glVertexAttrib2f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2dv, "QOpenGLFunctions_2_1.glVertexAttrib2dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2960 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib2dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 19333 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2dv, doc_QOpenGLFunctions_2_1_glVertexAttrib2dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib2d, "QOpenGLFunctions_2_1.glVertexAttrib2d(int, float, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib2d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLdouble a1;
        GLdouble a2;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Budd", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->glVertexAttrib2d(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib2d, doc_QOpenGLFunctions_2_1_glVertexAttrib2d);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1sv, "QOpenGLFunctions_2_1.glVertexAttrib1sv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1sv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1sv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2969 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_SHORT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib1sv(a0, reinterpret_cast<const GLshort *>(array));
#line 19405 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1sv, doc_QOpenGLFunctions_2_1_glVertexAttrib1sv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1s, "QOpenGLFunctions_2_1.glVertexAttrib1s(int, int)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1s(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1s(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLshort a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buh", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertexAttrib1s(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1s, doc_QOpenGLFunctions_2_1_glVertexAttrib1s);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1fv, "QOpenGLFunctions_2_1.glVertexAttrib1fv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1fv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1fv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2978 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_FLOAT, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib1fv(a0, reinterpret_cast<const GLfloat *>(array));
#line 19476 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1fv, doc_QOpenGLFunctions_2_1_glVertexAttrib1fv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1f, "QOpenGLFunctions_2_1.glVertexAttrib1f(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1f(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1f(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLfloat a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Buf", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertexAttrib1f(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1f, doc_QOpenGLFunctions_2_1_glVertexAttrib1f);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1dv, "QOpenGLFunctions_2_1.glVertexAttrib1dv(int, sequence-or-buffer)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1dv(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1dv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        PyObject * a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuP0", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 2987 "/home/amankaushik/pyProjects/newsnotify/PyQt/sip/_QOpenGLFunctions_2_1/qopenglfunctions_2_1.sip"
        const GLvoid *array = qpyopengl_value_array(&sipError, a1, GL_DOUBLE, sipSelf);
        
        if (sipError == sipErrorNone)
            sipCpp->glVertexAttrib1dv(a0, reinterpret_cast<const GLdouble *>(array));
#line 19547 "/home/amankaushik/pyProjects/newsnotify/PyQt/_QOpenGLFunctions_2_1/sip_QOpenGLFunctions_2_1QOpenGLFunctions_2_1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1dv, doc_QOpenGLFunctions_2_1_glVertexAttrib1dv);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFunctions_2_1_glVertexAttrib1d, "QOpenGLFunctions_2_1.glVertexAttrib1d(int, float)");

extern "C" {static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1d(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFunctions_2_1_glVertexAttrib1d(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLuint a0;
        GLdouble a1;
        QOpenGLFunctions_2_1 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bud", &sipSelf, sipType_QOpenGLFunctions_2_1, &sipCpp, &a0, &a1))
        {
            sipCpp->glVertexAttrib1d(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFunctions_2_1, sipName_glVertexAttrib1d, doc_QOpenGLFunctions_2_1_glVertexAttrib1d);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QOpenGLFunctions_2_1(void *, const sipTypeDef *);}
static void *cast_QOpenGLFunctions_2_1(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QOpenGLFunctions_2_1)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractOpenGLFunctions)->ctd_cast((QAbstractOpenGLFunctions *)(QOpenGLFunctions_2_1 *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFunctions_2_1(void *, int);}
static void release_QOpenGLFunctions_2_1(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQOpenGLFunctions_2_1 *>(sipCppV);
    else
        delete reinterpret_cast<QOpenGLFunctions_2_1 *>(sipCppV);
}


extern "C" {static void dealloc_QOpenGLFunctions_2_1(sipSimpleWrapper *);}
static void dealloc_QOpenGLFunctions_2_1(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLFunctions_2_1 *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLFunctions_2_1(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLFunctions_2_1(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFunctions_2_1(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQOpenGLFunctions_2_1 *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQOpenGLFunctions_2_1();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLFunctions_2_1[] = {{0, 1, 1}};


static PyMethodDef methods_QOpenGLFunctions_2_1[] = {
    {SIP_MLNAME_CAST(sipName_glAccum), meth_QOpenGLFunctions_2_1_glAccum, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glAccum)},
    {SIP_MLNAME_CAST(sipName_glActiveTexture), meth_QOpenGLFunctions_2_1_glActiveTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glActiveTexture)},
    {SIP_MLNAME_CAST(sipName_glAlphaFunc), meth_QOpenGLFunctions_2_1_glAlphaFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glAlphaFunc)},
    {SIP_MLNAME_CAST(sipName_glArrayElement), meth_QOpenGLFunctions_2_1_glArrayElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glArrayElement)},
    {SIP_MLNAME_CAST(sipName_glAttachShader), meth_QOpenGLFunctions_2_1_glAttachShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glAttachShader)},
    {SIP_MLNAME_CAST(sipName_glBegin), meth_QOpenGLFunctions_2_1_glBegin, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBegin)},
    {SIP_MLNAME_CAST(sipName_glBeginQuery), meth_QOpenGLFunctions_2_1_glBeginQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBeginQuery)},
    {SIP_MLNAME_CAST(sipName_glBindAttribLocation), meth_QOpenGLFunctions_2_1_glBindAttribLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBindAttribLocation)},
    {SIP_MLNAME_CAST(sipName_glBindBuffer), meth_QOpenGLFunctions_2_1_glBindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBindBuffer)},
    {SIP_MLNAME_CAST(sipName_glBindTexture), meth_QOpenGLFunctions_2_1_glBindTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBindTexture)},
    {SIP_MLNAME_CAST(sipName_glBitmap), meth_QOpenGLFunctions_2_1_glBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBitmap)},
    {SIP_MLNAME_CAST(sipName_glBlendColor), meth_QOpenGLFunctions_2_1_glBlendColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBlendColor)},
    {SIP_MLNAME_CAST(sipName_glBlendEquation), meth_QOpenGLFunctions_2_1_glBlendEquation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBlendEquation)},
    {SIP_MLNAME_CAST(sipName_glBlendEquationSeparate), meth_QOpenGLFunctions_2_1_glBlendEquationSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBlendEquationSeparate)},
    {SIP_MLNAME_CAST(sipName_glBlendFunc), meth_QOpenGLFunctions_2_1_glBlendFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBlendFunc)},
    {SIP_MLNAME_CAST(sipName_glBlendFuncSeparate), meth_QOpenGLFunctions_2_1_glBlendFuncSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBlendFuncSeparate)},
    {SIP_MLNAME_CAST(sipName_glBufferData), meth_QOpenGLFunctions_2_1_glBufferData, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBufferData)},
    {SIP_MLNAME_CAST(sipName_glBufferSubData), meth_QOpenGLFunctions_2_1_glBufferSubData, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glBufferSubData)},
    {SIP_MLNAME_CAST(sipName_glCallList), meth_QOpenGLFunctions_2_1_glCallList, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCallList)},
    {SIP_MLNAME_CAST(sipName_glClear), meth_QOpenGLFunctions_2_1_glClear, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClear)},
    {SIP_MLNAME_CAST(sipName_glClearAccum), meth_QOpenGLFunctions_2_1_glClearAccum, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClearAccum)},
    {SIP_MLNAME_CAST(sipName_glClearColor), meth_QOpenGLFunctions_2_1_glClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClearColor)},
    {SIP_MLNAME_CAST(sipName_glClearDepth), meth_QOpenGLFunctions_2_1_glClearDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClearDepth)},
    {SIP_MLNAME_CAST(sipName_glClearIndex), meth_QOpenGLFunctions_2_1_glClearIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClearIndex)},
    {SIP_MLNAME_CAST(sipName_glClearStencil), meth_QOpenGLFunctions_2_1_glClearStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClearStencil)},
    {SIP_MLNAME_CAST(sipName_glClientActiveTexture), meth_QOpenGLFunctions_2_1_glClientActiveTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClientActiveTexture)},
    {SIP_MLNAME_CAST(sipName_glClipPlane), meth_QOpenGLFunctions_2_1_glClipPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glClipPlane)},
    {SIP_MLNAME_CAST(sipName_glColor3b), meth_QOpenGLFunctions_2_1_glColor3b, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3b)},
    {SIP_MLNAME_CAST(sipName_glColor3bv), meth_QOpenGLFunctions_2_1_glColor3bv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3bv)},
    {SIP_MLNAME_CAST(sipName_glColor3d), meth_QOpenGLFunctions_2_1_glColor3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3d)},
    {SIP_MLNAME_CAST(sipName_glColor3dv), meth_QOpenGLFunctions_2_1_glColor3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3dv)},
    {SIP_MLNAME_CAST(sipName_glColor3f), meth_QOpenGLFunctions_2_1_glColor3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3f)},
    {SIP_MLNAME_CAST(sipName_glColor3fv), meth_QOpenGLFunctions_2_1_glColor3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3fv)},
    {SIP_MLNAME_CAST(sipName_glColor3i), meth_QOpenGLFunctions_2_1_glColor3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3i)},
    {SIP_MLNAME_CAST(sipName_glColor3iv), meth_QOpenGLFunctions_2_1_glColor3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3iv)},
    {SIP_MLNAME_CAST(sipName_glColor3s), meth_QOpenGLFunctions_2_1_glColor3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3s)},
    {SIP_MLNAME_CAST(sipName_glColor3sv), meth_QOpenGLFunctions_2_1_glColor3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3sv)},
    {SIP_MLNAME_CAST(sipName_glColor3ub), meth_QOpenGLFunctions_2_1_glColor3ub, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3ub)},
    {SIP_MLNAME_CAST(sipName_glColor3ubv), meth_QOpenGLFunctions_2_1_glColor3ubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3ubv)},
    {SIP_MLNAME_CAST(sipName_glColor3ui), meth_QOpenGLFunctions_2_1_glColor3ui, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3ui)},
    {SIP_MLNAME_CAST(sipName_glColor3uiv), meth_QOpenGLFunctions_2_1_glColor3uiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3uiv)},
    {SIP_MLNAME_CAST(sipName_glColor3us), meth_QOpenGLFunctions_2_1_glColor3us, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3us)},
    {SIP_MLNAME_CAST(sipName_glColor3usv), meth_QOpenGLFunctions_2_1_glColor3usv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor3usv)},
    {SIP_MLNAME_CAST(sipName_glColor4b), meth_QOpenGLFunctions_2_1_glColor4b, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4b)},
    {SIP_MLNAME_CAST(sipName_glColor4bv), meth_QOpenGLFunctions_2_1_glColor4bv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4bv)},
    {SIP_MLNAME_CAST(sipName_glColor4d), meth_QOpenGLFunctions_2_1_glColor4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4d)},
    {SIP_MLNAME_CAST(sipName_glColor4dv), meth_QOpenGLFunctions_2_1_glColor4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4dv)},
    {SIP_MLNAME_CAST(sipName_glColor4f), meth_QOpenGLFunctions_2_1_glColor4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4f)},
    {SIP_MLNAME_CAST(sipName_glColor4fv), meth_QOpenGLFunctions_2_1_glColor4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4fv)},
    {SIP_MLNAME_CAST(sipName_glColor4i), meth_QOpenGLFunctions_2_1_glColor4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4i)},
    {SIP_MLNAME_CAST(sipName_glColor4iv), meth_QOpenGLFunctions_2_1_glColor4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4iv)},
    {SIP_MLNAME_CAST(sipName_glColor4s), meth_QOpenGLFunctions_2_1_glColor4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4s)},
    {SIP_MLNAME_CAST(sipName_glColor4sv), meth_QOpenGLFunctions_2_1_glColor4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4sv)},
    {SIP_MLNAME_CAST(sipName_glColor4ub), meth_QOpenGLFunctions_2_1_glColor4ub, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4ub)},
    {SIP_MLNAME_CAST(sipName_glColor4ubv), meth_QOpenGLFunctions_2_1_glColor4ubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4ubv)},
    {SIP_MLNAME_CAST(sipName_glColor4ui), meth_QOpenGLFunctions_2_1_glColor4ui, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4ui)},
    {SIP_MLNAME_CAST(sipName_glColor4uiv), meth_QOpenGLFunctions_2_1_glColor4uiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4uiv)},
    {SIP_MLNAME_CAST(sipName_glColor4us), meth_QOpenGLFunctions_2_1_glColor4us, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4us)},
    {SIP_MLNAME_CAST(sipName_glColor4usv), meth_QOpenGLFunctions_2_1_glColor4usv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColor4usv)},
    {SIP_MLNAME_CAST(sipName_glColorMask), meth_QOpenGLFunctions_2_1_glColorMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorMask)},
    {SIP_MLNAME_CAST(sipName_glColorMaterial), meth_QOpenGLFunctions_2_1_glColorMaterial, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorMaterial)},
    {SIP_MLNAME_CAST(sipName_glColorPointer), meth_QOpenGLFunctions_2_1_glColorPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorPointer)},
    {SIP_MLNAME_CAST(sipName_glColorSubTable), meth_QOpenGLFunctions_2_1_glColorSubTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorSubTable)},
    {SIP_MLNAME_CAST(sipName_glColorTable), meth_QOpenGLFunctions_2_1_glColorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorTable)},
    {SIP_MLNAME_CAST(sipName_glColorTableParameterfv), meth_QOpenGLFunctions_2_1_glColorTableParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorTableParameterfv)},
    {SIP_MLNAME_CAST(sipName_glColorTableParameteriv), meth_QOpenGLFunctions_2_1_glColorTableParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glColorTableParameteriv)},
    {SIP_MLNAME_CAST(sipName_glCompileShader), meth_QOpenGLFunctions_2_1_glCompileShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompileShader)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexImage1D), meth_QOpenGLFunctions_2_1_glCompressedTexImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexImage1D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexImage2D), meth_QOpenGLFunctions_2_1_glCompressedTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexImage3D), meth_QOpenGLFunctions_2_1_glCompressedTexImage3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexImage3D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexSubImage1D), meth_QOpenGLFunctions_2_1_glCompressedTexSubImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage1D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexSubImage2D), meth_QOpenGLFunctions_2_1_glCompressedTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glCompressedTexSubImage3D), meth_QOpenGLFunctions_2_1_glCompressedTexSubImage3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCompressedTexSubImage3D)},
    {SIP_MLNAME_CAST(sipName_glConvolutionFilter1D), meth_QOpenGLFunctions_2_1_glConvolutionFilter1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionFilter1D)},
    {SIP_MLNAME_CAST(sipName_glConvolutionFilter2D), meth_QOpenGLFunctions_2_1_glConvolutionFilter2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionFilter2D)},
    {SIP_MLNAME_CAST(sipName_glConvolutionParameterf), meth_QOpenGLFunctions_2_1_glConvolutionParameterf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionParameterf)},
    {SIP_MLNAME_CAST(sipName_glConvolutionParameterfv), meth_QOpenGLFunctions_2_1_glConvolutionParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionParameterfv)},
    {SIP_MLNAME_CAST(sipName_glConvolutionParameteri), meth_QOpenGLFunctions_2_1_glConvolutionParameteri, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionParameteri)},
    {SIP_MLNAME_CAST(sipName_glConvolutionParameteriv), meth_QOpenGLFunctions_2_1_glConvolutionParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glConvolutionParameteriv)},
    {SIP_MLNAME_CAST(sipName_glCopyColorSubTable), meth_QOpenGLFunctions_2_1_glCopyColorSubTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyColorSubTable)},
    {SIP_MLNAME_CAST(sipName_glCopyColorTable), meth_QOpenGLFunctions_2_1_glCopyColorTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyColorTable)},
    {SIP_MLNAME_CAST(sipName_glCopyConvolutionFilter1D), meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter1D)},
    {SIP_MLNAME_CAST(sipName_glCopyConvolutionFilter2D), meth_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyConvolutionFilter2D)},
    {SIP_MLNAME_CAST(sipName_glCopyPixels), meth_QOpenGLFunctions_2_1_glCopyPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyPixels)},
    {SIP_MLNAME_CAST(sipName_glCopyTexImage1D), meth_QOpenGLFunctions_2_1_glCopyTexImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyTexImage1D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexImage2D), meth_QOpenGLFunctions_2_1_glCopyTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexSubImage1D), meth_QOpenGLFunctions_2_1_glCopyTexSubImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyTexSubImage1D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexSubImage2D), meth_QOpenGLFunctions_2_1_glCopyTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glCopyTexSubImage3D), meth_QOpenGLFunctions_2_1_glCopyTexSubImage3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCopyTexSubImage3D)},
    {SIP_MLNAME_CAST(sipName_glCreateProgram), meth_QOpenGLFunctions_2_1_glCreateProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCreateProgram)},
    {SIP_MLNAME_CAST(sipName_glCreateShader), meth_QOpenGLFunctions_2_1_glCreateShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCreateShader)},
    {SIP_MLNAME_CAST(sipName_glCullFace), meth_QOpenGLFunctions_2_1_glCullFace, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glCullFace)},
    {SIP_MLNAME_CAST(sipName_glDeleteBuffers), meth_QOpenGLFunctions_2_1_glDeleteBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteBuffers)},
    {SIP_MLNAME_CAST(sipName_glDeleteLists), meth_QOpenGLFunctions_2_1_glDeleteLists, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteLists)},
    {SIP_MLNAME_CAST(sipName_glDeleteProgram), meth_QOpenGLFunctions_2_1_glDeleteProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteProgram)},
    {SIP_MLNAME_CAST(sipName_glDeleteQueries), meth_QOpenGLFunctions_2_1_glDeleteQueries, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteQueries)},
    {SIP_MLNAME_CAST(sipName_glDeleteShader), meth_QOpenGLFunctions_2_1_glDeleteShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteShader)},
    {SIP_MLNAME_CAST(sipName_glDeleteTextures), meth_QOpenGLFunctions_2_1_glDeleteTextures, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDeleteTextures)},
    {SIP_MLNAME_CAST(sipName_glDepthFunc), meth_QOpenGLFunctions_2_1_glDepthFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDepthFunc)},
    {SIP_MLNAME_CAST(sipName_glDepthMask), meth_QOpenGLFunctions_2_1_glDepthMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDepthMask)},
    {SIP_MLNAME_CAST(sipName_glDepthRange), meth_QOpenGLFunctions_2_1_glDepthRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDepthRange)},
    {SIP_MLNAME_CAST(sipName_glDetachShader), meth_QOpenGLFunctions_2_1_glDetachShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDetachShader)},
    {SIP_MLNAME_CAST(sipName_glDisable), meth_QOpenGLFunctions_2_1_glDisable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDisable)},
    {SIP_MLNAME_CAST(sipName_glDisableClientState), meth_QOpenGLFunctions_2_1_glDisableClientState, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDisableClientState)},
    {SIP_MLNAME_CAST(sipName_glDisableVertexAttribArray), meth_QOpenGLFunctions_2_1_glDisableVertexAttribArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDisableVertexAttribArray)},
    {SIP_MLNAME_CAST(sipName_glDrawArrays), meth_QOpenGLFunctions_2_1_glDrawArrays, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawArrays)},
    {SIP_MLNAME_CAST(sipName_glDrawBuffer), meth_QOpenGLFunctions_2_1_glDrawBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawBuffer)},
    {SIP_MLNAME_CAST(sipName_glDrawBuffers), meth_QOpenGLFunctions_2_1_glDrawBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawBuffers)},
    {SIP_MLNAME_CAST(sipName_glDrawElements), meth_QOpenGLFunctions_2_1_glDrawElements, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawElements)},
    {SIP_MLNAME_CAST(sipName_glDrawPixels), meth_QOpenGLFunctions_2_1_glDrawPixels, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawPixels)},
    {SIP_MLNAME_CAST(sipName_glDrawRangeElements), meth_QOpenGLFunctions_2_1_glDrawRangeElements, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glDrawRangeElements)},
    {SIP_MLNAME_CAST(sipName_glEdgeFlag), meth_QOpenGLFunctions_2_1_glEdgeFlag, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEdgeFlag)},
    {SIP_MLNAME_CAST(sipName_glEdgeFlagPointer), meth_QOpenGLFunctions_2_1_glEdgeFlagPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEdgeFlagPointer)},
    {SIP_MLNAME_CAST(sipName_glEdgeFlagv), meth_QOpenGLFunctions_2_1_glEdgeFlagv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEdgeFlagv)},
    {SIP_MLNAME_CAST(sipName_glEnable), meth_QOpenGLFunctions_2_1_glEnable, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEnable)},
    {SIP_MLNAME_CAST(sipName_glEnableClientState), meth_QOpenGLFunctions_2_1_glEnableClientState, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEnableClientState)},
    {SIP_MLNAME_CAST(sipName_glEnableVertexAttribArray), meth_QOpenGLFunctions_2_1_glEnableVertexAttribArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEnableVertexAttribArray)},
    {SIP_MLNAME_CAST(sipName_glEnd), meth_QOpenGLFunctions_2_1_glEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEnd)},
    {SIP_MLNAME_CAST(sipName_glEndList), meth_QOpenGLFunctions_2_1_glEndList, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEndList)},
    {SIP_MLNAME_CAST(sipName_glEndQuery), meth_QOpenGLFunctions_2_1_glEndQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEndQuery)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord1d), meth_QOpenGLFunctions_2_1_glEvalCoord1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord1d)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord1dv), meth_QOpenGLFunctions_2_1_glEvalCoord1dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord1dv)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord1f), meth_QOpenGLFunctions_2_1_glEvalCoord1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord1f)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord1fv), meth_QOpenGLFunctions_2_1_glEvalCoord1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord1fv)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord2d), meth_QOpenGLFunctions_2_1_glEvalCoord2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord2d)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord2dv), meth_QOpenGLFunctions_2_1_glEvalCoord2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord2dv)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord2f), meth_QOpenGLFunctions_2_1_glEvalCoord2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord2f)},
    {SIP_MLNAME_CAST(sipName_glEvalCoord2fv), meth_QOpenGLFunctions_2_1_glEvalCoord2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalCoord2fv)},
    {SIP_MLNAME_CAST(sipName_glEvalMesh1), meth_QOpenGLFunctions_2_1_glEvalMesh1, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalMesh1)},
    {SIP_MLNAME_CAST(sipName_glEvalMesh2), meth_QOpenGLFunctions_2_1_glEvalMesh2, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalMesh2)},
    {SIP_MLNAME_CAST(sipName_glEvalPoint1), meth_QOpenGLFunctions_2_1_glEvalPoint1, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalPoint1)},
    {SIP_MLNAME_CAST(sipName_glEvalPoint2), meth_QOpenGLFunctions_2_1_glEvalPoint2, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glEvalPoint2)},
    {SIP_MLNAME_CAST(sipName_glFinish), meth_QOpenGLFunctions_2_1_glFinish, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFinish)},
    {SIP_MLNAME_CAST(sipName_glFlush), meth_QOpenGLFunctions_2_1_glFlush, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFlush)},
    {SIP_MLNAME_CAST(sipName_glFogCoordPointer), meth_QOpenGLFunctions_2_1_glFogCoordPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogCoordPointer)},
    {SIP_MLNAME_CAST(sipName_glFogCoordd), meth_QOpenGLFunctions_2_1_glFogCoordd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogCoordd)},
    {SIP_MLNAME_CAST(sipName_glFogCoorddv), meth_QOpenGLFunctions_2_1_glFogCoorddv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogCoorddv)},
    {SIP_MLNAME_CAST(sipName_glFogCoordf), meth_QOpenGLFunctions_2_1_glFogCoordf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogCoordf)},
    {SIP_MLNAME_CAST(sipName_glFogCoordfv), meth_QOpenGLFunctions_2_1_glFogCoordfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogCoordfv)},
    {SIP_MLNAME_CAST(sipName_glFogf), meth_QOpenGLFunctions_2_1_glFogf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogf)},
    {SIP_MLNAME_CAST(sipName_glFogfv), meth_QOpenGLFunctions_2_1_glFogfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogfv)},
    {SIP_MLNAME_CAST(sipName_glFogi), meth_QOpenGLFunctions_2_1_glFogi, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogi)},
    {SIP_MLNAME_CAST(sipName_glFogiv), meth_QOpenGLFunctions_2_1_glFogiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFogiv)},
    {SIP_MLNAME_CAST(sipName_glFrontFace), meth_QOpenGLFunctions_2_1_glFrontFace, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFrontFace)},
    {SIP_MLNAME_CAST(sipName_glFrustum), meth_QOpenGLFunctions_2_1_glFrustum, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glFrustum)},
    {SIP_MLNAME_CAST(sipName_glGenBuffers), meth_QOpenGLFunctions_2_1_glGenBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGenBuffers)},
    {SIP_MLNAME_CAST(sipName_glGenLists), meth_QOpenGLFunctions_2_1_glGenLists, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGenLists)},
    {SIP_MLNAME_CAST(sipName_glGenQueries), meth_QOpenGLFunctions_2_1_glGenQueries, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGenQueries)},
    {SIP_MLNAME_CAST(sipName_glGenTextures), meth_QOpenGLFunctions_2_1_glGenTextures, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGenTextures)},
    {SIP_MLNAME_CAST(sipName_glGetActiveAttrib), meth_QOpenGLFunctions_2_1_glGetActiveAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetActiveAttrib)},
    {SIP_MLNAME_CAST(sipName_glGetActiveUniform), meth_QOpenGLFunctions_2_1_glGetActiveUniform, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetActiveUniform)},
    {SIP_MLNAME_CAST(sipName_glGetAttachedShaders), meth_QOpenGLFunctions_2_1_glGetAttachedShaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetAttachedShaders)},
    {SIP_MLNAME_CAST(sipName_glGetAttribLocation), meth_QOpenGLFunctions_2_1_glGetAttribLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetAttribLocation)},
    {SIP_MLNAME_CAST(sipName_glGetBooleanv), meth_QOpenGLFunctions_2_1_glGetBooleanv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetBooleanv)},
    {SIP_MLNAME_CAST(sipName_glGetBufferParameteriv), meth_QOpenGLFunctions_2_1_glGetBufferParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetBufferParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetClipPlane), meth_QOpenGLFunctions_2_1_glGetClipPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetClipPlane)},
    {SIP_MLNAME_CAST(sipName_glGetColorTableParameterfv), meth_QOpenGLFunctions_2_1_glGetColorTableParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetColorTableParameterfv)},
    {SIP_MLNAME_CAST(sipName_glGetColorTableParameteriv), meth_QOpenGLFunctions_2_1_glGetColorTableParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetColorTableParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetConvolutionParameterfv), meth_QOpenGLFunctions_2_1_glGetConvolutionParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetConvolutionParameterfv)},
    {SIP_MLNAME_CAST(sipName_glGetConvolutionParameteriv), meth_QOpenGLFunctions_2_1_glGetConvolutionParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetConvolutionParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetDoublev), meth_QOpenGLFunctions_2_1_glGetDoublev, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetDoublev)},
    {SIP_MLNAME_CAST(sipName_glGetError), meth_QOpenGLFunctions_2_1_glGetError, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetError)},
    {SIP_MLNAME_CAST(sipName_glGetFloatv), meth_QOpenGLFunctions_2_1_glGetFloatv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetFloatv)},
    {SIP_MLNAME_CAST(sipName_glGetIntegerv), meth_QOpenGLFunctions_2_1_glGetIntegerv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetIntegerv)},
    {SIP_MLNAME_CAST(sipName_glGetLightfv), meth_QOpenGLFunctions_2_1_glGetLightfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetLightfv)},
    {SIP_MLNAME_CAST(sipName_glGetLightiv), meth_QOpenGLFunctions_2_1_glGetLightiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetLightiv)},
    {SIP_MLNAME_CAST(sipName_glGetMaterialfv), meth_QOpenGLFunctions_2_1_glGetMaterialfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetMaterialfv)},
    {SIP_MLNAME_CAST(sipName_glGetMaterialiv), meth_QOpenGLFunctions_2_1_glGetMaterialiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetMaterialiv)},
    {SIP_MLNAME_CAST(sipName_glGetProgramInfoLog), meth_QOpenGLFunctions_2_1_glGetProgramInfoLog, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetProgramInfoLog)},
    {SIP_MLNAME_CAST(sipName_glGetProgramiv), meth_QOpenGLFunctions_2_1_glGetProgramiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetProgramiv)},
    {SIP_MLNAME_CAST(sipName_glGetQueryiv), meth_QOpenGLFunctions_2_1_glGetQueryiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetQueryiv)},
    {SIP_MLNAME_CAST(sipName_glGetShaderInfoLog), meth_QOpenGLFunctions_2_1_glGetShaderInfoLog, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetShaderInfoLog)},
    {SIP_MLNAME_CAST(sipName_glGetShaderSource), meth_QOpenGLFunctions_2_1_glGetShaderSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetShaderSource)},
    {SIP_MLNAME_CAST(sipName_glGetShaderiv), meth_QOpenGLFunctions_2_1_glGetShaderiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetShaderiv)},
    {SIP_MLNAME_CAST(sipName_glGetString), meth_QOpenGLFunctions_2_1_glGetString, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetString)},
    {SIP_MLNAME_CAST(sipName_glGetTexEnvfv), meth_QOpenGLFunctions_2_1_glGetTexEnvfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexEnvfv)},
    {SIP_MLNAME_CAST(sipName_glGetTexEnviv), meth_QOpenGLFunctions_2_1_glGetTexEnviv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexEnviv)},
    {SIP_MLNAME_CAST(sipName_glGetTexGendv), meth_QOpenGLFunctions_2_1_glGetTexGendv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexGendv)},
    {SIP_MLNAME_CAST(sipName_glGetTexGenfv), meth_QOpenGLFunctions_2_1_glGetTexGenfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexGenfv)},
    {SIP_MLNAME_CAST(sipName_glGetTexGeniv), meth_QOpenGLFunctions_2_1_glGetTexGeniv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexGeniv)},
    {SIP_MLNAME_CAST(sipName_glGetTexLevelParameterfv), meth_QOpenGLFunctions_2_1_glGetTexLevelParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexLevelParameterfv)},
    {SIP_MLNAME_CAST(sipName_glGetTexLevelParameteriv), meth_QOpenGLFunctions_2_1_glGetTexLevelParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexLevelParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetTexParameterfv), meth_QOpenGLFunctions_2_1_glGetTexParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexParameterfv)},
    {SIP_MLNAME_CAST(sipName_glGetTexParameteriv), meth_QOpenGLFunctions_2_1_glGetTexParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetTexParameteriv)},
    {SIP_MLNAME_CAST(sipName_glGetUniformLocation), meth_QOpenGLFunctions_2_1_glGetUniformLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetUniformLocation)},
    {SIP_MLNAME_CAST(sipName_glGetVertexAttribdv), meth_QOpenGLFunctions_2_1_glGetVertexAttribdv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetVertexAttribdv)},
    {SIP_MLNAME_CAST(sipName_glGetVertexAttribfv), meth_QOpenGLFunctions_2_1_glGetVertexAttribfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetVertexAttribfv)},
    {SIP_MLNAME_CAST(sipName_glGetVertexAttribiv), meth_QOpenGLFunctions_2_1_glGetVertexAttribiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glGetVertexAttribiv)},
    {SIP_MLNAME_CAST(sipName_glHint), meth_QOpenGLFunctions_2_1_glHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glHint)},
    {SIP_MLNAME_CAST(sipName_glHistogram), meth_QOpenGLFunctions_2_1_glHistogram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glHistogram)},
    {SIP_MLNAME_CAST(sipName_glIndexMask), meth_QOpenGLFunctions_2_1_glIndexMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexMask)},
    {SIP_MLNAME_CAST(sipName_glIndexPointer), meth_QOpenGLFunctions_2_1_glIndexPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexPointer)},
    {SIP_MLNAME_CAST(sipName_glIndexd), meth_QOpenGLFunctions_2_1_glIndexd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexd)},
    {SIP_MLNAME_CAST(sipName_glIndexdv), meth_QOpenGLFunctions_2_1_glIndexdv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexdv)},
    {SIP_MLNAME_CAST(sipName_glIndexf), meth_QOpenGLFunctions_2_1_glIndexf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexf)},
    {SIP_MLNAME_CAST(sipName_glIndexfv), meth_QOpenGLFunctions_2_1_glIndexfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexfv)},
    {SIP_MLNAME_CAST(sipName_glIndexi), meth_QOpenGLFunctions_2_1_glIndexi, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexi)},
    {SIP_MLNAME_CAST(sipName_glIndexiv), meth_QOpenGLFunctions_2_1_glIndexiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexiv)},
    {SIP_MLNAME_CAST(sipName_glIndexs), meth_QOpenGLFunctions_2_1_glIndexs, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexs)},
    {SIP_MLNAME_CAST(sipName_glIndexsv), meth_QOpenGLFunctions_2_1_glIndexsv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexsv)},
    {SIP_MLNAME_CAST(sipName_glIndexub), meth_QOpenGLFunctions_2_1_glIndexub, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexub)},
    {SIP_MLNAME_CAST(sipName_glIndexubv), meth_QOpenGLFunctions_2_1_glIndexubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIndexubv)},
    {SIP_MLNAME_CAST(sipName_glInitNames), meth_QOpenGLFunctions_2_1_glInitNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glInitNames)},
    {SIP_MLNAME_CAST(sipName_glIsBuffer), meth_QOpenGLFunctions_2_1_glIsBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsBuffer)},
    {SIP_MLNAME_CAST(sipName_glIsEnabled), meth_QOpenGLFunctions_2_1_glIsEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsEnabled)},
    {SIP_MLNAME_CAST(sipName_glIsList), meth_QOpenGLFunctions_2_1_glIsList, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsList)},
    {SIP_MLNAME_CAST(sipName_glIsProgram), meth_QOpenGLFunctions_2_1_glIsProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsProgram)},
    {SIP_MLNAME_CAST(sipName_glIsQuery), meth_QOpenGLFunctions_2_1_glIsQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsQuery)},
    {SIP_MLNAME_CAST(sipName_glIsShader), meth_QOpenGLFunctions_2_1_glIsShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsShader)},
    {SIP_MLNAME_CAST(sipName_glIsTexture), meth_QOpenGLFunctions_2_1_glIsTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glIsTexture)},
    {SIP_MLNAME_CAST(sipName_glLightModelf), meth_QOpenGLFunctions_2_1_glLightModelf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightModelf)},
    {SIP_MLNAME_CAST(sipName_glLightModelfv), meth_QOpenGLFunctions_2_1_glLightModelfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightModelfv)},
    {SIP_MLNAME_CAST(sipName_glLightModeli), meth_QOpenGLFunctions_2_1_glLightModeli, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightModeli)},
    {SIP_MLNAME_CAST(sipName_glLightModeliv), meth_QOpenGLFunctions_2_1_glLightModeliv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightModeliv)},
    {SIP_MLNAME_CAST(sipName_glLightf), meth_QOpenGLFunctions_2_1_glLightf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightf)},
    {SIP_MLNAME_CAST(sipName_glLightfv), meth_QOpenGLFunctions_2_1_glLightfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightfv)},
    {SIP_MLNAME_CAST(sipName_glLighti), meth_QOpenGLFunctions_2_1_glLighti, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLighti)},
    {SIP_MLNAME_CAST(sipName_glLightiv), meth_QOpenGLFunctions_2_1_glLightiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLightiv)},
    {SIP_MLNAME_CAST(sipName_glLineStipple), meth_QOpenGLFunctions_2_1_glLineStipple, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLineStipple)},
    {SIP_MLNAME_CAST(sipName_glLineWidth), meth_QOpenGLFunctions_2_1_glLineWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLineWidth)},
    {SIP_MLNAME_CAST(sipName_glLinkProgram), meth_QOpenGLFunctions_2_1_glLinkProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLinkProgram)},
    {SIP_MLNAME_CAST(sipName_glListBase), meth_QOpenGLFunctions_2_1_glListBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glListBase)},
    {SIP_MLNAME_CAST(sipName_glLoadIdentity), meth_QOpenGLFunctions_2_1_glLoadIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadIdentity)},
    {SIP_MLNAME_CAST(sipName_glLoadMatrixd), meth_QOpenGLFunctions_2_1_glLoadMatrixd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadMatrixd)},
    {SIP_MLNAME_CAST(sipName_glLoadMatrixf), meth_QOpenGLFunctions_2_1_glLoadMatrixf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadMatrixf)},
    {SIP_MLNAME_CAST(sipName_glLoadName), meth_QOpenGLFunctions_2_1_glLoadName, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadName)},
    {SIP_MLNAME_CAST(sipName_glLoadTransposeMatrixd), meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixd)},
    {SIP_MLNAME_CAST(sipName_glLoadTransposeMatrixf), meth_QOpenGLFunctions_2_1_glLoadTransposeMatrixf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLoadTransposeMatrixf)},
    {SIP_MLNAME_CAST(sipName_glLogicOp), meth_QOpenGLFunctions_2_1_glLogicOp, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glLogicOp)},
    {SIP_MLNAME_CAST(sipName_glMap1d), meth_QOpenGLFunctions_2_1_glMap1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMap1d)},
    {SIP_MLNAME_CAST(sipName_glMap1f), meth_QOpenGLFunctions_2_1_glMap1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMap1f)},
    {SIP_MLNAME_CAST(sipName_glMap2d), meth_QOpenGLFunctions_2_1_glMap2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMap2d)},
    {SIP_MLNAME_CAST(sipName_glMap2f), meth_QOpenGLFunctions_2_1_glMap2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMap2f)},
    {SIP_MLNAME_CAST(sipName_glMapGrid1d), meth_QOpenGLFunctions_2_1_glMapGrid1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMapGrid1d)},
    {SIP_MLNAME_CAST(sipName_glMapGrid1f), meth_QOpenGLFunctions_2_1_glMapGrid1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMapGrid1f)},
    {SIP_MLNAME_CAST(sipName_glMapGrid2d), meth_QOpenGLFunctions_2_1_glMapGrid2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMapGrid2d)},
    {SIP_MLNAME_CAST(sipName_glMapGrid2f), meth_QOpenGLFunctions_2_1_glMapGrid2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMapGrid2f)},
    {SIP_MLNAME_CAST(sipName_glMaterialf), meth_QOpenGLFunctions_2_1_glMaterialf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMaterialf)},
    {SIP_MLNAME_CAST(sipName_glMaterialfv), meth_QOpenGLFunctions_2_1_glMaterialfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMaterialfv)},
    {SIP_MLNAME_CAST(sipName_glMateriali), meth_QOpenGLFunctions_2_1_glMateriali, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMateriali)},
    {SIP_MLNAME_CAST(sipName_glMaterialiv), meth_QOpenGLFunctions_2_1_glMaterialiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMaterialiv)},
    {SIP_MLNAME_CAST(sipName_glMatrixMode), meth_QOpenGLFunctions_2_1_glMatrixMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMatrixMode)},
    {SIP_MLNAME_CAST(sipName_glMinmax), meth_QOpenGLFunctions_2_1_glMinmax, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMinmax)},
    {SIP_MLNAME_CAST(sipName_glMultMatrixd), meth_QOpenGLFunctions_2_1_glMultMatrixd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultMatrixd)},
    {SIP_MLNAME_CAST(sipName_glMultMatrixf), meth_QOpenGLFunctions_2_1_glMultMatrixf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultMatrixf)},
    {SIP_MLNAME_CAST(sipName_glMultTransposeMatrixd), meth_QOpenGLFunctions_2_1_glMultTransposeMatrixd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultTransposeMatrixd)},
    {SIP_MLNAME_CAST(sipName_glMultTransposeMatrixf), meth_QOpenGLFunctions_2_1_glMultTransposeMatrixf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultTransposeMatrixf)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1d), meth_QOpenGLFunctions_2_1_glMultiTexCoord1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1d)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1dv), meth_QOpenGLFunctions_2_1_glMultiTexCoord1dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1dv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1f), meth_QOpenGLFunctions_2_1_glMultiTexCoord1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1f)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1fv), meth_QOpenGLFunctions_2_1_glMultiTexCoord1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1fv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1i), meth_QOpenGLFunctions_2_1_glMultiTexCoord1i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1i)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1iv), meth_QOpenGLFunctions_2_1_glMultiTexCoord1iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1iv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1s), meth_QOpenGLFunctions_2_1_glMultiTexCoord1s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1s)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord1sv), meth_QOpenGLFunctions_2_1_glMultiTexCoord1sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord1sv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2d), meth_QOpenGLFunctions_2_1_glMultiTexCoord2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2d)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2dv), meth_QOpenGLFunctions_2_1_glMultiTexCoord2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2dv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2f), meth_QOpenGLFunctions_2_1_glMultiTexCoord2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2f)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2fv), meth_QOpenGLFunctions_2_1_glMultiTexCoord2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2fv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2i), meth_QOpenGLFunctions_2_1_glMultiTexCoord2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2i)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2iv), meth_QOpenGLFunctions_2_1_glMultiTexCoord2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2iv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2s), meth_QOpenGLFunctions_2_1_glMultiTexCoord2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2s)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord2sv), meth_QOpenGLFunctions_2_1_glMultiTexCoord2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord2sv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3d), meth_QOpenGLFunctions_2_1_glMultiTexCoord3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3d)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3dv), meth_QOpenGLFunctions_2_1_glMultiTexCoord3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3dv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3f), meth_QOpenGLFunctions_2_1_glMultiTexCoord3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3f)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3fv), meth_QOpenGLFunctions_2_1_glMultiTexCoord3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3fv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3i), meth_QOpenGLFunctions_2_1_glMultiTexCoord3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3i)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3iv), meth_QOpenGLFunctions_2_1_glMultiTexCoord3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3iv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3s), meth_QOpenGLFunctions_2_1_glMultiTexCoord3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3s)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord3sv), meth_QOpenGLFunctions_2_1_glMultiTexCoord3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord3sv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4d), meth_QOpenGLFunctions_2_1_glMultiTexCoord4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4d)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4dv), meth_QOpenGLFunctions_2_1_glMultiTexCoord4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4dv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4f), meth_QOpenGLFunctions_2_1_glMultiTexCoord4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4f)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4fv), meth_QOpenGLFunctions_2_1_glMultiTexCoord4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4fv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4i), meth_QOpenGLFunctions_2_1_glMultiTexCoord4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4i)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4iv), meth_QOpenGLFunctions_2_1_glMultiTexCoord4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4iv)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4s), meth_QOpenGLFunctions_2_1_glMultiTexCoord4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4s)},
    {SIP_MLNAME_CAST(sipName_glMultiTexCoord4sv), meth_QOpenGLFunctions_2_1_glMultiTexCoord4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glMultiTexCoord4sv)},
    {SIP_MLNAME_CAST(sipName_glNewList), meth_QOpenGLFunctions_2_1_glNewList, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNewList)},
    {SIP_MLNAME_CAST(sipName_glNormal3b), meth_QOpenGLFunctions_2_1_glNormal3b, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3b)},
    {SIP_MLNAME_CAST(sipName_glNormal3bv), meth_QOpenGLFunctions_2_1_glNormal3bv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3bv)},
    {SIP_MLNAME_CAST(sipName_glNormal3d), meth_QOpenGLFunctions_2_1_glNormal3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3d)},
    {SIP_MLNAME_CAST(sipName_glNormal3dv), meth_QOpenGLFunctions_2_1_glNormal3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3dv)},
    {SIP_MLNAME_CAST(sipName_glNormal3f), meth_QOpenGLFunctions_2_1_glNormal3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3f)},
    {SIP_MLNAME_CAST(sipName_glNormal3fv), meth_QOpenGLFunctions_2_1_glNormal3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3fv)},
    {SIP_MLNAME_CAST(sipName_glNormal3i), meth_QOpenGLFunctions_2_1_glNormal3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3i)},
    {SIP_MLNAME_CAST(sipName_glNormal3iv), meth_QOpenGLFunctions_2_1_glNormal3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3iv)},
    {SIP_MLNAME_CAST(sipName_glNormal3s), meth_QOpenGLFunctions_2_1_glNormal3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3s)},
    {SIP_MLNAME_CAST(sipName_glNormal3sv), meth_QOpenGLFunctions_2_1_glNormal3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormal3sv)},
    {SIP_MLNAME_CAST(sipName_glNormalPointer), meth_QOpenGLFunctions_2_1_glNormalPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glNormalPointer)},
    {SIP_MLNAME_CAST(sipName_glOrtho), meth_QOpenGLFunctions_2_1_glOrtho, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glOrtho)},
    {SIP_MLNAME_CAST(sipName_glPassThrough), meth_QOpenGLFunctions_2_1_glPassThrough, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPassThrough)},
    {SIP_MLNAME_CAST(sipName_glPixelMapfv), meth_QOpenGLFunctions_2_1_glPixelMapfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelMapfv)},
    {SIP_MLNAME_CAST(sipName_glPixelMapuiv), meth_QOpenGLFunctions_2_1_glPixelMapuiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelMapuiv)},
    {SIP_MLNAME_CAST(sipName_glPixelMapusv), meth_QOpenGLFunctions_2_1_glPixelMapusv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelMapusv)},
    {SIP_MLNAME_CAST(sipName_glPixelStoref), meth_QOpenGLFunctions_2_1_glPixelStoref, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelStoref)},
    {SIP_MLNAME_CAST(sipName_glPixelStorei), meth_QOpenGLFunctions_2_1_glPixelStorei, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelStorei)},
    {SIP_MLNAME_CAST(sipName_glPixelTransferf), meth_QOpenGLFunctions_2_1_glPixelTransferf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelTransferf)},
    {SIP_MLNAME_CAST(sipName_glPixelTransferi), meth_QOpenGLFunctions_2_1_glPixelTransferi, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelTransferi)},
    {SIP_MLNAME_CAST(sipName_glPixelZoom), meth_QOpenGLFunctions_2_1_glPixelZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPixelZoom)},
    {SIP_MLNAME_CAST(sipName_glPointParameterf), meth_QOpenGLFunctions_2_1_glPointParameterf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPointParameterf)},
    {SIP_MLNAME_CAST(sipName_glPointParameterfv), meth_QOpenGLFunctions_2_1_glPointParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPointParameterfv)},
    {SIP_MLNAME_CAST(sipName_glPointParameteri), meth_QOpenGLFunctions_2_1_glPointParameteri, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPointParameteri)},
    {SIP_MLNAME_CAST(sipName_glPointParameteriv), meth_QOpenGLFunctions_2_1_glPointParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPointParameteriv)},
    {SIP_MLNAME_CAST(sipName_glPointSize), meth_QOpenGLFunctions_2_1_glPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPointSize)},
    {SIP_MLNAME_CAST(sipName_glPolygonMode), meth_QOpenGLFunctions_2_1_glPolygonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPolygonMode)},
    {SIP_MLNAME_CAST(sipName_glPolygonOffset), meth_QOpenGLFunctions_2_1_glPolygonOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPolygonOffset)},
    {SIP_MLNAME_CAST(sipName_glPolygonStipple), meth_QOpenGLFunctions_2_1_glPolygonStipple, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPolygonStipple)},
    {SIP_MLNAME_CAST(sipName_glPopAttrib), meth_QOpenGLFunctions_2_1_glPopAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPopAttrib)},
    {SIP_MLNAME_CAST(sipName_glPopClientAttrib), meth_QOpenGLFunctions_2_1_glPopClientAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPopClientAttrib)},
    {SIP_MLNAME_CAST(sipName_glPopMatrix), meth_QOpenGLFunctions_2_1_glPopMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPopMatrix)},
    {SIP_MLNAME_CAST(sipName_glPopName), meth_QOpenGLFunctions_2_1_glPopName, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPopName)},
    {SIP_MLNAME_CAST(sipName_glPushAttrib), meth_QOpenGLFunctions_2_1_glPushAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPushAttrib)},
    {SIP_MLNAME_CAST(sipName_glPushClientAttrib), meth_QOpenGLFunctions_2_1_glPushClientAttrib, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPushClientAttrib)},
    {SIP_MLNAME_CAST(sipName_glPushMatrix), meth_QOpenGLFunctions_2_1_glPushMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPushMatrix)},
    {SIP_MLNAME_CAST(sipName_glPushName), meth_QOpenGLFunctions_2_1_glPushName, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glPushName)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2d), meth_QOpenGLFunctions_2_1_glRasterPos2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2d)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2dv), meth_QOpenGLFunctions_2_1_glRasterPos2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2dv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2f), meth_QOpenGLFunctions_2_1_glRasterPos2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2f)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2fv), meth_QOpenGLFunctions_2_1_glRasterPos2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2fv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2i), meth_QOpenGLFunctions_2_1_glRasterPos2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2i)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2iv), meth_QOpenGLFunctions_2_1_glRasterPos2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2iv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2s), meth_QOpenGLFunctions_2_1_glRasterPos2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2s)},
    {SIP_MLNAME_CAST(sipName_glRasterPos2sv), meth_QOpenGLFunctions_2_1_glRasterPos2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos2sv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3d), meth_QOpenGLFunctions_2_1_glRasterPos3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3d)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3dv), meth_QOpenGLFunctions_2_1_glRasterPos3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3dv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3f), meth_QOpenGLFunctions_2_1_glRasterPos3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3f)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3fv), meth_QOpenGLFunctions_2_1_glRasterPos3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3fv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3i), meth_QOpenGLFunctions_2_1_glRasterPos3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3i)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3iv), meth_QOpenGLFunctions_2_1_glRasterPos3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3iv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3s), meth_QOpenGLFunctions_2_1_glRasterPos3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3s)},
    {SIP_MLNAME_CAST(sipName_glRasterPos3sv), meth_QOpenGLFunctions_2_1_glRasterPos3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos3sv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4d), meth_QOpenGLFunctions_2_1_glRasterPos4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4d)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4dv), meth_QOpenGLFunctions_2_1_glRasterPos4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4dv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4f), meth_QOpenGLFunctions_2_1_glRasterPos4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4f)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4fv), meth_QOpenGLFunctions_2_1_glRasterPos4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4fv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4i), meth_QOpenGLFunctions_2_1_glRasterPos4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4i)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4iv), meth_QOpenGLFunctions_2_1_glRasterPos4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4iv)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4s), meth_QOpenGLFunctions_2_1_glRasterPos4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4s)},
    {SIP_MLNAME_CAST(sipName_glRasterPos4sv), meth_QOpenGLFunctions_2_1_glRasterPos4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRasterPos4sv)},
    {SIP_MLNAME_CAST(sipName_glReadBuffer), meth_QOpenGLFunctions_2_1_glReadBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glReadBuffer)},
    {SIP_MLNAME_CAST(sipName_glRectd), meth_QOpenGLFunctions_2_1_glRectd, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRectd)},
    {SIP_MLNAME_CAST(sipName_glRectf), meth_QOpenGLFunctions_2_1_glRectf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRectf)},
    {SIP_MLNAME_CAST(sipName_glRecti), meth_QOpenGLFunctions_2_1_glRecti, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRecti)},
    {SIP_MLNAME_CAST(sipName_glRects), meth_QOpenGLFunctions_2_1_glRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRects)},
    {SIP_MLNAME_CAST(sipName_glRenderMode), meth_QOpenGLFunctions_2_1_glRenderMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRenderMode)},
    {SIP_MLNAME_CAST(sipName_glResetHistogram), meth_QOpenGLFunctions_2_1_glResetHistogram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glResetHistogram)},
    {SIP_MLNAME_CAST(sipName_glResetMinmax), meth_QOpenGLFunctions_2_1_glResetMinmax, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glResetMinmax)},
    {SIP_MLNAME_CAST(sipName_glRotated), meth_QOpenGLFunctions_2_1_glRotated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRotated)},
    {SIP_MLNAME_CAST(sipName_glRotatef), meth_QOpenGLFunctions_2_1_glRotatef, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glRotatef)},
    {SIP_MLNAME_CAST(sipName_glSampleCoverage), meth_QOpenGLFunctions_2_1_glSampleCoverage, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSampleCoverage)},
    {SIP_MLNAME_CAST(sipName_glScaled), meth_QOpenGLFunctions_2_1_glScaled, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glScaled)},
    {SIP_MLNAME_CAST(sipName_glScalef), meth_QOpenGLFunctions_2_1_glScalef, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glScalef)},
    {SIP_MLNAME_CAST(sipName_glScissor), meth_QOpenGLFunctions_2_1_glScissor, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glScissor)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3b), meth_QOpenGLFunctions_2_1_glSecondaryColor3b, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3b)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3bv), meth_QOpenGLFunctions_2_1_glSecondaryColor3bv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3bv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3d), meth_QOpenGLFunctions_2_1_glSecondaryColor3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3d)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3dv), meth_QOpenGLFunctions_2_1_glSecondaryColor3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3dv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3f), meth_QOpenGLFunctions_2_1_glSecondaryColor3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3f)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3fv), meth_QOpenGLFunctions_2_1_glSecondaryColor3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3fv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3i), meth_QOpenGLFunctions_2_1_glSecondaryColor3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3i)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3iv), meth_QOpenGLFunctions_2_1_glSecondaryColor3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3iv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3s), meth_QOpenGLFunctions_2_1_glSecondaryColor3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3s)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3sv), meth_QOpenGLFunctions_2_1_glSecondaryColor3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3sv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3ub), meth_QOpenGLFunctions_2_1_glSecondaryColor3ub, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3ub)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3ubv), meth_QOpenGLFunctions_2_1_glSecondaryColor3ubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3ubv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3ui), meth_QOpenGLFunctions_2_1_glSecondaryColor3ui, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3ui)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3uiv), meth_QOpenGLFunctions_2_1_glSecondaryColor3uiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3uiv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3us), meth_QOpenGLFunctions_2_1_glSecondaryColor3us, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3us)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColor3usv), meth_QOpenGLFunctions_2_1_glSecondaryColor3usv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColor3usv)},
    {SIP_MLNAME_CAST(sipName_glSecondaryColorPointer), meth_QOpenGLFunctions_2_1_glSecondaryColorPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glSecondaryColorPointer)},
    {SIP_MLNAME_CAST(sipName_glShadeModel), meth_QOpenGLFunctions_2_1_glShadeModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glShadeModel)},
    {SIP_MLNAME_CAST(sipName_glStencilFunc), meth_QOpenGLFunctions_2_1_glStencilFunc, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilFunc)},
    {SIP_MLNAME_CAST(sipName_glStencilFuncSeparate), meth_QOpenGLFunctions_2_1_glStencilFuncSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilFuncSeparate)},
    {SIP_MLNAME_CAST(sipName_glStencilMask), meth_QOpenGLFunctions_2_1_glStencilMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilMask)},
    {SIP_MLNAME_CAST(sipName_glStencilMaskSeparate), meth_QOpenGLFunctions_2_1_glStencilMaskSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilMaskSeparate)},
    {SIP_MLNAME_CAST(sipName_glStencilOp), meth_QOpenGLFunctions_2_1_glStencilOp, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilOp)},
    {SIP_MLNAME_CAST(sipName_glStencilOpSeparate), meth_QOpenGLFunctions_2_1_glStencilOpSeparate, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glStencilOpSeparate)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1d), meth_QOpenGLFunctions_2_1_glTexCoord1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1d)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1dv), meth_QOpenGLFunctions_2_1_glTexCoord1dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1dv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1f), meth_QOpenGLFunctions_2_1_glTexCoord1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1f)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1fv), meth_QOpenGLFunctions_2_1_glTexCoord1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1fv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1i), meth_QOpenGLFunctions_2_1_glTexCoord1i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1i)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1iv), meth_QOpenGLFunctions_2_1_glTexCoord1iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1iv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1s), meth_QOpenGLFunctions_2_1_glTexCoord1s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1s)},
    {SIP_MLNAME_CAST(sipName_glTexCoord1sv), meth_QOpenGLFunctions_2_1_glTexCoord1sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord1sv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2d), meth_QOpenGLFunctions_2_1_glTexCoord2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2d)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2dv), meth_QOpenGLFunctions_2_1_glTexCoord2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2dv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2f), meth_QOpenGLFunctions_2_1_glTexCoord2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2f)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2fv), meth_QOpenGLFunctions_2_1_glTexCoord2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2fv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2i), meth_QOpenGLFunctions_2_1_glTexCoord2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2i)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2iv), meth_QOpenGLFunctions_2_1_glTexCoord2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2iv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2s), meth_QOpenGLFunctions_2_1_glTexCoord2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2s)},
    {SIP_MLNAME_CAST(sipName_glTexCoord2sv), meth_QOpenGLFunctions_2_1_glTexCoord2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord2sv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3d), meth_QOpenGLFunctions_2_1_glTexCoord3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3d)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3dv), meth_QOpenGLFunctions_2_1_glTexCoord3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3dv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3f), meth_QOpenGLFunctions_2_1_glTexCoord3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3f)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3fv), meth_QOpenGLFunctions_2_1_glTexCoord3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3fv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3i), meth_QOpenGLFunctions_2_1_glTexCoord3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3i)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3iv), meth_QOpenGLFunctions_2_1_glTexCoord3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3iv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3s), meth_QOpenGLFunctions_2_1_glTexCoord3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3s)},
    {SIP_MLNAME_CAST(sipName_glTexCoord3sv), meth_QOpenGLFunctions_2_1_glTexCoord3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord3sv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4d), meth_QOpenGLFunctions_2_1_glTexCoord4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4d)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4dv), meth_QOpenGLFunctions_2_1_glTexCoord4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4dv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4f), meth_QOpenGLFunctions_2_1_glTexCoord4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4f)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4fv), meth_QOpenGLFunctions_2_1_glTexCoord4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4fv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4i), meth_QOpenGLFunctions_2_1_glTexCoord4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4i)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4iv), meth_QOpenGLFunctions_2_1_glTexCoord4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4iv)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4s), meth_QOpenGLFunctions_2_1_glTexCoord4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4s)},
    {SIP_MLNAME_CAST(sipName_glTexCoord4sv), meth_QOpenGLFunctions_2_1_glTexCoord4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoord4sv)},
    {SIP_MLNAME_CAST(sipName_glTexCoordPointer), meth_QOpenGLFunctions_2_1_glTexCoordPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexCoordPointer)},
    {SIP_MLNAME_CAST(sipName_glTexEnvf), meth_QOpenGLFunctions_2_1_glTexEnvf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexEnvf)},
    {SIP_MLNAME_CAST(sipName_glTexEnvfv), meth_QOpenGLFunctions_2_1_glTexEnvfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexEnvfv)},
    {SIP_MLNAME_CAST(sipName_glTexEnvi), meth_QOpenGLFunctions_2_1_glTexEnvi, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexEnvi)},
    {SIP_MLNAME_CAST(sipName_glTexEnviv), meth_QOpenGLFunctions_2_1_glTexEnviv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexEnviv)},
    {SIP_MLNAME_CAST(sipName_glTexGend), meth_QOpenGLFunctions_2_1_glTexGend, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGend)},
    {SIP_MLNAME_CAST(sipName_glTexGendv), meth_QOpenGLFunctions_2_1_glTexGendv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGendv)},
    {SIP_MLNAME_CAST(sipName_glTexGenf), meth_QOpenGLFunctions_2_1_glTexGenf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGenf)},
    {SIP_MLNAME_CAST(sipName_glTexGenfv), meth_QOpenGLFunctions_2_1_glTexGenfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGenfv)},
    {SIP_MLNAME_CAST(sipName_glTexGeni), meth_QOpenGLFunctions_2_1_glTexGeni, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGeni)},
    {SIP_MLNAME_CAST(sipName_glTexGeniv), meth_QOpenGLFunctions_2_1_glTexGeniv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexGeniv)},
    {SIP_MLNAME_CAST(sipName_glTexImage1D), meth_QOpenGLFunctions_2_1_glTexImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexImage1D)},
    {SIP_MLNAME_CAST(sipName_glTexImage2D), meth_QOpenGLFunctions_2_1_glTexImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexImage2D)},
    {SIP_MLNAME_CAST(sipName_glTexImage3D), meth_QOpenGLFunctions_2_1_glTexImage3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexImage3D)},
    {SIP_MLNAME_CAST(sipName_glTexParameterf), meth_QOpenGLFunctions_2_1_glTexParameterf, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexParameterf)},
    {SIP_MLNAME_CAST(sipName_glTexParameterfv), meth_QOpenGLFunctions_2_1_glTexParameterfv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexParameterfv)},
    {SIP_MLNAME_CAST(sipName_glTexParameteri), meth_QOpenGLFunctions_2_1_glTexParameteri, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexParameteri)},
    {SIP_MLNAME_CAST(sipName_glTexParameteriv), meth_QOpenGLFunctions_2_1_glTexParameteriv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexParameteriv)},
    {SIP_MLNAME_CAST(sipName_glTexSubImage1D), meth_QOpenGLFunctions_2_1_glTexSubImage1D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexSubImage1D)},
    {SIP_MLNAME_CAST(sipName_glTexSubImage2D), meth_QOpenGLFunctions_2_1_glTexSubImage2D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexSubImage2D)},
    {SIP_MLNAME_CAST(sipName_glTexSubImage3D), meth_QOpenGLFunctions_2_1_glTexSubImage3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTexSubImage3D)},
    {SIP_MLNAME_CAST(sipName_glTranslated), meth_QOpenGLFunctions_2_1_glTranslated, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTranslated)},
    {SIP_MLNAME_CAST(sipName_glTranslatef), meth_QOpenGLFunctions_2_1_glTranslatef, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glTranslatef)},
    {SIP_MLNAME_CAST(sipName_glUniform1f), meth_QOpenGLFunctions_2_1_glUniform1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform1f)},
    {SIP_MLNAME_CAST(sipName_glUniform1fv), meth_QOpenGLFunctions_2_1_glUniform1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform1fv)},
    {SIP_MLNAME_CAST(sipName_glUniform1i), meth_QOpenGLFunctions_2_1_glUniform1i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform1i)},
    {SIP_MLNAME_CAST(sipName_glUniform1iv), meth_QOpenGLFunctions_2_1_glUniform1iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform1iv)},
    {SIP_MLNAME_CAST(sipName_glUniform2f), meth_QOpenGLFunctions_2_1_glUniform2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform2f)},
    {SIP_MLNAME_CAST(sipName_glUniform2fv), meth_QOpenGLFunctions_2_1_glUniform2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform2fv)},
    {SIP_MLNAME_CAST(sipName_glUniform2i), meth_QOpenGLFunctions_2_1_glUniform2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform2i)},
    {SIP_MLNAME_CAST(sipName_glUniform2iv), meth_QOpenGLFunctions_2_1_glUniform2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform2iv)},
    {SIP_MLNAME_CAST(sipName_glUniform3f), meth_QOpenGLFunctions_2_1_glUniform3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform3f)},
    {SIP_MLNAME_CAST(sipName_glUniform3fv), meth_QOpenGLFunctions_2_1_glUniform3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform3fv)},
    {SIP_MLNAME_CAST(sipName_glUniform3i), meth_QOpenGLFunctions_2_1_glUniform3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform3i)},
    {SIP_MLNAME_CAST(sipName_glUniform3iv), meth_QOpenGLFunctions_2_1_glUniform3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform3iv)},
    {SIP_MLNAME_CAST(sipName_glUniform4f), meth_QOpenGLFunctions_2_1_glUniform4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform4f)},
    {SIP_MLNAME_CAST(sipName_glUniform4fv), meth_QOpenGLFunctions_2_1_glUniform4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform4fv)},
    {SIP_MLNAME_CAST(sipName_glUniform4i), meth_QOpenGLFunctions_2_1_glUniform4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform4i)},
    {SIP_MLNAME_CAST(sipName_glUniform4iv), meth_QOpenGLFunctions_2_1_glUniform4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniform4iv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix2fv), meth_QOpenGLFunctions_2_1_glUniformMatrix2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniformMatrix2fv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix3fv), meth_QOpenGLFunctions_2_1_glUniformMatrix3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniformMatrix3fv)},
    {SIP_MLNAME_CAST(sipName_glUniformMatrix4fv), meth_QOpenGLFunctions_2_1_glUniformMatrix4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUniformMatrix4fv)},
    {SIP_MLNAME_CAST(sipName_glUnmapBuffer), meth_QOpenGLFunctions_2_1_glUnmapBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUnmapBuffer)},
    {SIP_MLNAME_CAST(sipName_glUseProgram), meth_QOpenGLFunctions_2_1_glUseProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glUseProgram)},
    {SIP_MLNAME_CAST(sipName_glValidateProgram), meth_QOpenGLFunctions_2_1_glValidateProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glValidateProgram)},
    {SIP_MLNAME_CAST(sipName_glVertex2d), meth_QOpenGLFunctions_2_1_glVertex2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2d)},
    {SIP_MLNAME_CAST(sipName_glVertex2dv), meth_QOpenGLFunctions_2_1_glVertex2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2dv)},
    {SIP_MLNAME_CAST(sipName_glVertex2f), meth_QOpenGLFunctions_2_1_glVertex2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2f)},
    {SIP_MLNAME_CAST(sipName_glVertex2fv), meth_QOpenGLFunctions_2_1_glVertex2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2fv)},
    {SIP_MLNAME_CAST(sipName_glVertex2i), meth_QOpenGLFunctions_2_1_glVertex2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2i)},
    {SIP_MLNAME_CAST(sipName_glVertex2iv), meth_QOpenGLFunctions_2_1_glVertex2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2iv)},
    {SIP_MLNAME_CAST(sipName_glVertex2s), meth_QOpenGLFunctions_2_1_glVertex2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2s)},
    {SIP_MLNAME_CAST(sipName_glVertex2sv), meth_QOpenGLFunctions_2_1_glVertex2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex2sv)},
    {SIP_MLNAME_CAST(sipName_glVertex3d), meth_QOpenGLFunctions_2_1_glVertex3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3d)},
    {SIP_MLNAME_CAST(sipName_glVertex3dv), meth_QOpenGLFunctions_2_1_glVertex3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3dv)},
    {SIP_MLNAME_CAST(sipName_glVertex3f), meth_QOpenGLFunctions_2_1_glVertex3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3f)},
    {SIP_MLNAME_CAST(sipName_glVertex3fv), meth_QOpenGLFunctions_2_1_glVertex3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3fv)},
    {SIP_MLNAME_CAST(sipName_glVertex3i), meth_QOpenGLFunctions_2_1_glVertex3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3i)},
    {SIP_MLNAME_CAST(sipName_glVertex3iv), meth_QOpenGLFunctions_2_1_glVertex3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3iv)},
    {SIP_MLNAME_CAST(sipName_glVertex3s), meth_QOpenGLFunctions_2_1_glVertex3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3s)},
    {SIP_MLNAME_CAST(sipName_glVertex3sv), meth_QOpenGLFunctions_2_1_glVertex3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex3sv)},
    {SIP_MLNAME_CAST(sipName_glVertex4d), meth_QOpenGLFunctions_2_1_glVertex4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4d)},
    {SIP_MLNAME_CAST(sipName_glVertex4dv), meth_QOpenGLFunctions_2_1_glVertex4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4dv)},
    {SIP_MLNAME_CAST(sipName_glVertex4f), meth_QOpenGLFunctions_2_1_glVertex4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4f)},
    {SIP_MLNAME_CAST(sipName_glVertex4fv), meth_QOpenGLFunctions_2_1_glVertex4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4fv)},
    {SIP_MLNAME_CAST(sipName_glVertex4i), meth_QOpenGLFunctions_2_1_glVertex4i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4i)},
    {SIP_MLNAME_CAST(sipName_glVertex4iv), meth_QOpenGLFunctions_2_1_glVertex4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4iv)},
    {SIP_MLNAME_CAST(sipName_glVertex4s), meth_QOpenGLFunctions_2_1_glVertex4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4s)},
    {SIP_MLNAME_CAST(sipName_glVertex4sv), meth_QOpenGLFunctions_2_1_glVertex4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertex4sv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1d), meth_QOpenGLFunctions_2_1_glVertexAttrib1d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1d)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1dv), meth_QOpenGLFunctions_2_1_glVertexAttrib1dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1dv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1f), meth_QOpenGLFunctions_2_1_glVertexAttrib1f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1fv), meth_QOpenGLFunctions_2_1_glVertexAttrib1fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1s), meth_QOpenGLFunctions_2_1_glVertexAttrib1s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1s)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib1sv), meth_QOpenGLFunctions_2_1_glVertexAttrib1sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib1sv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2d), meth_QOpenGLFunctions_2_1_glVertexAttrib2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2d)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2dv), meth_QOpenGLFunctions_2_1_glVertexAttrib2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2dv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2f), meth_QOpenGLFunctions_2_1_glVertexAttrib2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2fv), meth_QOpenGLFunctions_2_1_glVertexAttrib2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2s), meth_QOpenGLFunctions_2_1_glVertexAttrib2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2s)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib2sv), meth_QOpenGLFunctions_2_1_glVertexAttrib2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib2sv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3d), meth_QOpenGLFunctions_2_1_glVertexAttrib3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3d)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3dv), meth_QOpenGLFunctions_2_1_glVertexAttrib3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3dv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3f), meth_QOpenGLFunctions_2_1_glVertexAttrib3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3fv), meth_QOpenGLFunctions_2_1_glVertexAttrib3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3s), meth_QOpenGLFunctions_2_1_glVertexAttrib3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3s)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib3sv), meth_QOpenGLFunctions_2_1_glVertexAttrib3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib3sv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nbv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nbv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nbv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Niv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Niv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Niv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nsv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nsv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nsv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nub), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nub, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nub)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nubv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nubv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nuiv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nuiv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4Nusv), meth_QOpenGLFunctions_2_1_glVertexAttrib4Nusv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4Nusv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4bv), meth_QOpenGLFunctions_2_1_glVertexAttrib4bv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4bv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4d), meth_QOpenGLFunctions_2_1_glVertexAttrib4d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4d)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4dv), meth_QOpenGLFunctions_2_1_glVertexAttrib4dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4dv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4f), meth_QOpenGLFunctions_2_1_glVertexAttrib4f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4f)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4fv), meth_QOpenGLFunctions_2_1_glVertexAttrib4fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4fv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4iv), meth_QOpenGLFunctions_2_1_glVertexAttrib4iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4iv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4s), meth_QOpenGLFunctions_2_1_glVertexAttrib4s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4s)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4sv), meth_QOpenGLFunctions_2_1_glVertexAttrib4sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4sv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4ubv), meth_QOpenGLFunctions_2_1_glVertexAttrib4ubv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4ubv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4uiv), meth_QOpenGLFunctions_2_1_glVertexAttrib4uiv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4uiv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttrib4usv), meth_QOpenGLFunctions_2_1_glVertexAttrib4usv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttrib4usv)},
    {SIP_MLNAME_CAST(sipName_glVertexAttribPointer), meth_QOpenGLFunctions_2_1_glVertexAttribPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexAttribPointer)},
    {SIP_MLNAME_CAST(sipName_glVertexPointer), meth_QOpenGLFunctions_2_1_glVertexPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glVertexPointer)},
    {SIP_MLNAME_CAST(sipName_glViewport), meth_QOpenGLFunctions_2_1_glViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glViewport)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2d), meth_QOpenGLFunctions_2_1_glWindowPos2d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2d)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2dv), meth_QOpenGLFunctions_2_1_glWindowPos2dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2dv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2f), meth_QOpenGLFunctions_2_1_glWindowPos2f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2f)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2fv), meth_QOpenGLFunctions_2_1_glWindowPos2fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2fv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2i), meth_QOpenGLFunctions_2_1_glWindowPos2i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2i)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2iv), meth_QOpenGLFunctions_2_1_glWindowPos2iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2iv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2s), meth_QOpenGLFunctions_2_1_glWindowPos2s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2s)},
    {SIP_MLNAME_CAST(sipName_glWindowPos2sv), meth_QOpenGLFunctions_2_1_glWindowPos2sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos2sv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3d), meth_QOpenGLFunctions_2_1_glWindowPos3d, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3d)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3dv), meth_QOpenGLFunctions_2_1_glWindowPos3dv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3dv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3f), meth_QOpenGLFunctions_2_1_glWindowPos3f, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3f)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3fv), meth_QOpenGLFunctions_2_1_glWindowPos3fv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3fv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3i), meth_QOpenGLFunctions_2_1_glWindowPos3i, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3i)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3iv), meth_QOpenGLFunctions_2_1_glWindowPos3iv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3iv)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3s), meth_QOpenGLFunctions_2_1_glWindowPos3s, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3s)},
    {SIP_MLNAME_CAST(sipName_glWindowPos3sv), meth_QOpenGLFunctions_2_1_glWindowPos3sv, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_glWindowPos3sv)},
    {SIP_MLNAME_CAST(sipName_initializeOpenGLFunctions), meth_QOpenGLFunctions_2_1_initializeOpenGLFunctions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFunctions_2_1_initializeOpenGLFunctions)}
};

PyDoc_STRVAR(doc_QOpenGLFunctions_2_1, "\1QOpenGLFunctions_2_1()");


pyqt5ClassTypeDef sipTypeDef__QOpenGLFunctions_2_1_QOpenGLFunctions_2_1 = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFunctions_2_1,
        {0}
    },
    {
        sipNameNr_QOpenGLFunctions_2_1,
        {0, 0, 1},
        536, methods_QOpenGLFunctions_2_1,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLFunctions_2_1,
    -1,
    -1,
    supers_QOpenGLFunctions_2_1,
    0,
    init_type_QOpenGLFunctions_2_1,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLFunctions_2_1,
    0,
    0,
    0,
    release_QOpenGLFunctions_2_1,
    cast_QOpenGLFunctions_2_1,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
